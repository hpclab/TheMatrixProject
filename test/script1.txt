// SCRIPT1 - Esame seguito entro 90 giorni da prescrizione

// Abbiamo aggiunto questo modulo per permettere il passaggio di parametri ad uno script. Ogni parametro � identificato da una coppia <identificatore,tipo>
Parameters_Loader (ParametersModule)
parameters
	params = [{DATE:date}]
end

Patients_File (FileInputModule)
parameters
	inputFileName = Patients.csv // Si assume sempre di avere file con estensione .csv
        inputSchema = IADperson
end

Filter_Alive_Patients (FilterModule)
inputs
	IADperson = Patients_File
parameters
   // NB: verificare il tipo di "$DATE". E' corretto modellarlo come un solo intero?
   // NB: verificare il comportamento di > e < con missing; 
   // missing D.Death e/o ENDDATE sono OK
	conditions = [{DATE_OF_DEATH > $DATE};{DATE_OF_BIRTH <= $DATE};{STARTDATE <= $DATE};{ENDDATE > $DATE}]
	boolExpr = AND
end

// questo tracciato record viene creato nuovo, quindi e' vuoto
Empty_Patients_Model (NewDataModule)
parameters
	attributes = [{PERSON_ID:string};{CI11ECG_betabloc:date}]
end

// crea i record nel nuovo tracciato record inizialmente vuoto
Alive_Person_ID (CopyAttributeModule)
inputs
	IADperson = Filter_Alive_Patients
	custom = Empty_Patients_Model
parameters
	inputAttributes = [ PERSON_ID ]
	resultAttributes = [ PERSON_ID ]
end

Sorted_Alive_Persons (SortModule)
inputs
	custom = Alive_Person_ID
parameters
	fieldNames = [ PERSON_ID ]
end

Outpat_File (FileInputModule)
parameters
	inputFileName = OUTPAT.csv
        inputSchema   = IADoutpat
end

Drug_File (FileInputModule)
parameters
	inputFileName = DRUG.csv
        inputSchema   = IADdrug
end

SortedOutpat_File (SortModule)
inputs
	IADoutpat = Outpat_File
parameters
	fieldNames = [ PatientId, PROC_DATE ]
end

SortedDrug_File (SortModule)
inputs
	IADdrug = Drug_File
parameters
	fieldNames = [ PatientId, DRUG_EXPOSURE_START_DATE ]
end


PrescriptionExam_Relation (ProductModule)
inputs
	IADoutpat = SortedOutpat_File
	IADdrug = SortedDrug_File
parameters
	IDfield = PatientID
	functions = [ equalsTo( 
                        SortedOutpat_File.PROC_COD
	                ,"89.41", "89.42", "89.43", "89.44", "89.44.1", "89.44.2", "92.05.1"
                      )
                      /*,matches (
                        SortedDrug_File.ATC,
                        "C07*", "C08*"
                      )*/
        ]
	//boolExpr = AND
end


/*

// Se pi� funzioni sono definite sullo stesso dataset esse sono applicate nell'ordine di definizione.
PrescriptionExam_Relation (ProductModule)
inputs
	IADoutpat = SortedOutpat_File
	IADdrug = SortedDrug_File
// NOTA 18/7/12 vedi script 0, sintassi alternativa
//	productInput1 = Sorted Alive Persons
//	productInput2 = Sorted IMA Patiens
parameters
	IDfield = PatientID
	// NB: "equalsTo" � la funzione TheMatrix che controlla se il valore dell'attributo � coincidente con almeno uno dei parametri
	function1 = [{dataset1,PROC_COD,equalsTo}]
	params1 = [{89.41};{89.42};{89.43};{89.44};{89.44.1};{89.44.2};{92.05.1}]
	function2 = [{dataset2,ATC,equalsTo}]
	// exp(X), definisce l'espressione regolare "X". E' adottata la sintassi standard Java per le espressioni regolari.
	params2 = [{exp(C07*)};{exp(C08*)}] 
	boolExpr = AND
// nota 18/7/12 qui lo schema di output puo' essere custom o un tipo piu' specifico
// (in pratica il tipo della prima sorgente); vale la pena considerarlo?
end
*/

// Nota: questo non e' un file vuoto
Extended_PrescriptionExam (ExtendDataModule)
inputs 
	custom = PrescriptionExam_Relation
// nota 18/7/12 qui sarebbe possibile dare un tipo piu' specifico (vedi product)
parameters
	attributes = [{ TIME_INTERVAL:int }]
end


Fill_Time_Interval (ApplyFunction)
inputs
	custom = Extended_PrescriptionExam
parameters
	 // "elapsedTime" calcola la differenza temporale tra due date, se negativa torna -1
	function = elapsedTime(PROC_DATE, DRUG_EXPOSURE_START_DATE)
	result = TIME_INTERVAL
end


Filter_Time_Condition (FilterModule)
inputs
	custom = Fill_Time_Interval
parameters
	conditions = [{TIME_INTERVAL <= 90};{TIME_INTERVAL >= 0}]
	boolExpr = AND
end

Sorted_TimeCondition_File (SortModule)
inputs
	custom = Filter_Time_Condition
parameters
	// ordiniamo rispetto alla data dell'esame 
	fieldNames = [PatientId,PROC_DATE]
end


Unique_SortedTimeCondition_File (FirstModule) 
inputs
	custom = Sorted_TimeCondition_File
parameters
	params = [PatientId]
end

// I campi "joinAttribute1" e "joinAttribute2" sono obbligatori. 
// Se i due joinAttribute sono uguali, allora il risultato 
// preso da "resultDataset" viene scritto nell'attributo "result"
// se no, resta inalterato (e quindi rimane a missing, in questo script)
Fill_CI11ECG_betabloc (ProjectionModule)
inputs
	IADperson = Sorted_Alive_Persons
	custom = Filter_Time_Condition
parameters
	joinAttribute1 = PERSON_ID
	joinAttribute2 = PatientID
        inputAttribute = PROC_DATE
	resultAttribute = CI11ECG_betabloc 
// registra la prima occorrenza di un esame che ha portato alla prescrizione ...
	
end

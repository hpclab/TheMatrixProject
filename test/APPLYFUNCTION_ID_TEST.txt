/* test of APPLYFUNCTION with function identity of different types: should always complete
 */

FILEP (FileInputModule)
parameters
      inputFileName = OUTPAT.csv
      inputSchema   = IADoutpat
end

// date
APPLY1 (ApplyFunction)
inputs
	IADoutpat = FILEP
parameters
	function = Id(PROC_START_DATE)
	result   = PROC_END_DATE
end

// int
APPLY2 (ApplyFunction)
inputs
	IADoutpat = APPLY1
parameters
	function = Id(PERSON_ID)
	result   = GROUP_CODE
end

// string
APPLY3 (ApplyFunction)
inputs
	IADoutpat = APPLY2
parameters
	function = Id(PROC_COD)
	result   = WARD_CODE
end

// boolean
APPLY4 (ApplyFunction)
inputs
	IADoutpat = APPLY3
parameters
	function = Id(MAX_WAITING_TIME)
	result   = EXEMPTION_LOWWAGE
end

// float  (may be tricky, same field...)
APPLY5 (ApplyFunction)
inputs
	IADoutpat = APPLY4
parameters
	function = Id(VALUE)
//	function = Id(VALUEBOOM) // what if the column does not exist
	result   = VALUE
//	result   = VALUEBOOM	// what if the destination column does not exist
end

//explicitly set an integer to a know value
APPLY6 (ApplyFunction)
inputs 
	IADoutpat = APPLY5
parameters
	function = Id(5)
	result	= QUANTITY
end

// PROBLEM! two modules with the same name and the parser is ok with that?
// explicitly set an integer to missing
APPLY7 (ApplyFunction)
inputs 
	IADoutpat = APPLY6
parameters
	function = Id(MISSING)
	result	= QUANTITY
end

APPLYLAST (ApplyFunction)
inputs
	IADoutpat = APPLY7
parameters
	function = Id(PERSON_ID)
	result	= PERSON_ID
end

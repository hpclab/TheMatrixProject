HOSP (ScriptInputModule)
parameters
	scriptFilename = LoadHOSP.txt
	inputName = HOSP
	expectedSchema = IADhosp
end
EXE (ScriptInputModule)
parameters
	scriptFilename = LoadEXE.txt
	inputName = EXE
	expectedSchema = IADexe
end
PERSON (ScriptInputModule)
parameters
	scriptFilename = LoadPERSON.txt
	inputName = PERSON
	expectedSchema = IADperson
end
DRUGS (ScriptInputModule)
parameters
	scriptFilename = LoadDRUGS.txt
	inputName = DRUGS
	expectedSchema = IADdrug
end
OUTPAT (ScriptInputModule)
parameters
	scriptFilename = LoadOUTPAT.txt
	inputName = OUTPAT
	expectedSchema = IADoutpat
end
DDRUG (ScriptInputModule)
parameters
	scriptFilename = LoadDDRUG.txt
	inputName = DDRUG
	expectedSchema = IADdrug
end

// PREVALENT: mark prevalent at date 2011-01-01 
ClFinalPrev12M (ExtendDataModule)
inputs
	IADperson = PERSON
parameters
  attributes = [ {IsPrev12M : boolean } ]
end
FinalPrev12M (ApplyFunction)
inputs
	custom = ClFinalPrev12M
parameters
	function = Id(true)
	result   = IsPrev12M
	conditions = [ {ENDDATE > 2011-01-01};{STARTDATE <= 2011-01-01} ]
	boolExpr = AND
end

// PREVALENT: mark prevalent at date 2011-12-31
ClFinalPrevDATEENDFUP (ExtendDataModule)
inputs
	custom = FinalPrev12M
parameters
  attributes = [ {IsPrevDATEENDFUP : boolean } ]
end
FinalPrevDATEENDFUP (ApplyFunction)
inputs
	custom = ClFinalPrevDATEENDFUP
parameters
	function = Id(true)
	result   = IsPrevDATEENDFUP
	conditions = [ {ENDDATE > 2011-12-31};{STARTDATE <= 2011-12-31} ]
	boolExpr = AND
end

// PREVALENT: filter prevalent at either date 2011-01-01 or date 2011-12-31
Cohort (FilterModule)
inputs
	custom = FinalPrevDATEENDFUP
parameters
	conditions = [{IsPrev12M = true}]
	
end

// DIAB: select from source HOSP 
FFirst_DIAB_HOSP (FilterModule)
inputs
	IADhosp = HOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  matches "250*"};{SECONDARY_DIAGNOSIS_1 matches "250*"};{SECONDARY_DIAGNOSIS_2 matches "250*"};{SECONDARY_DIAGNOSIS_3 matches "250*"};{SECONDARY_DIAGNOSIS_4 matches "250*"};{SECONDARY_DIAGNOSIS_5 matches "250*"}]
	boolExpr = OR 
end
sortedFirst_DIAB_HOSP (SortModule)
inputs
	IADhosp = FFirst_DIAB_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end
FinalFirst_DIAB_HOSP (AggregateModule)
inputs
	IADhosp = sortedFirst_DIAB_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_DIAB_HOSP : date } ]
end

// DIAB: select from source DRUGS 
FFirst_DIAB_DRUGSDRUGS (FilterModule)
inputs
	IADdrug = DRUGS
parameters
	conditions = [{ATC matches "A10*"}]
	
end
FFirst_DIAB_DRUGSDDRUG (FilterModule)
inputs
	IADdrug = DDRUG
parameters
	conditions = [{ATC matches "A10*"}]
	
end
FFirst_DIAB_DRUGSTot (UnionModule)
inputs
	IADdrug = FFirst_DIAB_DRUGSDDRUG
	IADdrug = FFirst_DIAB_DRUGSDRUGS
end

ClYearFirst_DIAB_DRUGS (ExtendDataModule)
inputs
	IADdrug = FFirst_DIAB_DRUGSTot
parameters
  attributes = [ { YearFirst_DIAB_DRUGS: int } ]
end
YearFirst_DIAB_DRUGS (ApplyFunction)
inputs
	custom = ClYearFirst_DIAB_DRUGS
parameters
	function = Year(DRUG_DISPENSING_DATE)
	result   = YearFirst_DIAB_DRUGS
	
	
end
sortedYearFirst_DIAB_DRUGS (SortModule)
inputs
	custom = YearFirst_DIAB_DRUGS
parameters
	fieldNames = [ PERSON_ID,YearFirst_DIAB_DRUGS ]
end
NumberFirst_DIAB_DRUGS (AggregateModule)
inputs
	custom = sortedYearFirst_DIAB_DRUGS
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirst_DIAB_DRUGS ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_DISPENSING_DATE) ]
	results =  [ { NumberFirst_DIAB_DRUGS : int };{ DateFirstFirst_DIAB_DRUGS : date } ]
end
FilterTwoFirst_DIAB_DRUGS (FilterModule)
inputs
	custom = NumberFirst_DIAB_DRUGS
parameters
	conditions = [{NumberFirst_DIAB_DRUGS>1}]
	
end
FinalFirst_DIAB_DRUGS (AggregateModule)
inputs
	custom = FilterTwoFirst_DIAB_DRUGS
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirst_DIAB_DRUGS) ]
	results =  [ {First_DIAB_DRUGS : date} ]
end

// DIAB: select from source EXE 
FFirst_DIAB_EXE (FilterModule)
inputs
	IADexe = EXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*250"}]
	
end
sortedFirst_DIAB_EXE (SortModule)
inputs
	IADexe = FFirst_DIAB_EXE
parameters
	fieldNames = [ PERSON_ID ]
end
FinalFirst_DIAB_EXE (AggregateModule)
inputs
	IADexe = sortedFirst_DIAB_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_DIAB_EXE : date } ]
end

// IHD: select from source HOSP 
FFirst_IHD_HOSP (FilterModule)
inputs
	IADhosp = HOSP
parameters
	conditions = [{MAIN_DIAGNOSIS = MISSING};{MAIN_DIAGNOSIS  matches "410*"};{SECONDARY_DIAGNOSIS_1 matches "410*"};{SECONDARY_DIAGNOSIS_2 matches "410*"};{SECONDARY_DIAGNOSIS_3 matches "410*"};{SECONDARY_DIAGNOSIS_4 matches "410*"};{SECONDARY_DIAGNOSIS_5 matches "410*"};{MAIN_DIAGNOSIS  matches "411*"};{SECONDARY_DIAGNOSIS_1 matches "411*"};{SECONDARY_DIAGNOSIS_2 matches "411*"};{SECONDARY_DIAGNOSIS_3 matches "411*"};{SECONDARY_DIAGNOSIS_4 matches "411*"};{SECONDARY_DIAGNOSIS_5 matches "411*"};{MAIN_DIAGNOSIS  matches "412*"};{SECONDARY_DIAGNOSIS_1 matches "412*"};{SECONDARY_DIAGNOSIS_2 matches "412*"};{SECONDARY_DIAGNOSIS_3 matches "412*"};{SECONDARY_DIAGNOSIS_4 matches "412*"};{SECONDARY_DIAGNOSIS_5 matches "412*"};{MAIN_DIAGNOSIS  matches "413*"};{SECONDARY_DIAGNOSIS_1 matches "413*"};{SECONDARY_DIAGNOSIS_2 matches "413*"};{SECONDARY_DIAGNOSIS_3 matches "413*"};{SECONDARY_DIAGNOSIS_4 matches "413*"};{SECONDARY_DIAGNOSIS_5 matches "413*"};{MAIN_DIAGNOSIS  matches "414*"};{SECONDARY_DIAGNOSIS_1 matches "414*"};{SECONDARY_DIAGNOSIS_2 matches "414*"};{SECONDARY_DIAGNOSIS_3 matches "414*"};{SECONDARY_DIAGNOSIS_4 matches "414*"};{SECONDARY_DIAGNOSIS_5 matches "414*"}]
	boolExpr = OR 
end
sortedFirst_IHD_HOSP (SortModule)
inputs
	IADhosp = FFirst_IHD_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end
FinalFirst_IHD_HOSP (AggregateModule)
inputs
	IADhosp = sortedFirst_IHD_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_IHD_HOSP : date } ]
end

// IHD: select from source DRUGS 
FFirst_IHD_DRUGSDRUGS (FilterModule)
inputs
	IADdrug = DRUGS
parameters
	conditions = [{ATC matches "C01DA*"}]
	
end
FFirst_IHD_DRUGSDDRUG (FilterModule)
inputs
	IADdrug = DDRUG
parameters
	conditions = [{ATC matches "C01DA*"}]
	
end
FFirst_IHD_DRUGSTot (UnionModule)
inputs
	IADdrug = FFirst_IHD_DRUGSDDRUG
	IADdrug = FFirst_IHD_DRUGSDRUGS
end

ClYearFirst_IHD_DRUGS (ExtendDataModule)
inputs
	IADdrug = FFirst_IHD_DRUGSTot
parameters
  attributes = [ { YearFirst_IHD_DRUGS: int } ]
end
YearFirst_IHD_DRUGS (ApplyFunction)
inputs
	custom = ClYearFirst_IHD_DRUGS
parameters
	function = Year(DRUG_DISPENSING_DATE)
	result   = YearFirst_IHD_DRUGS
	
	
end
sortedYearFirst_IHD_DRUGS (SortModule)
inputs
	custom = YearFirst_IHD_DRUGS
parameters
	fieldNames = [ PERSON_ID,YearFirst_IHD_DRUGS ]
end
NumberFirst_IHD_DRUGS (AggregateModule)
inputs
	custom = sortedYearFirst_IHD_DRUGS
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirst_IHD_DRUGS ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_DISPENSING_DATE) ]
	results =  [ { NumberFirst_IHD_DRUGS : int };{ DateFirstFirst_IHD_DRUGS : date } ]
end
FilterTwoFirst_IHD_DRUGS (FilterModule)
inputs
	custom = NumberFirst_IHD_DRUGS
parameters
	conditions = [{NumberFirst_IHD_DRUGS>1}]
	
end
FinalFirst_IHD_DRUGS (AggregateModule)
inputs
	custom = FilterTwoFirst_IHD_DRUGS
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirst_IHD_DRUGS) ]
	results =  [ {First_IHD_DRUGS : date} ]
end

// IHD: select from source EXE 
FFirst_IHD_EXE (FilterModule)
inputs
	IADexe = EXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*414"}]
	
end
sortedFirst_IHD_EXE (SortModule)
inputs
	IADexe = FFirst_IHD_EXE
parameters
	fieldNames = [ PERSON_ID ]
end
FinalFirst_IHD_EXE (AggregateModule)
inputs
	IADexe = sortedFirst_IHD_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_IHD_EXE : date } ]
end

// HF: select from source HOSP 
FFirst_HF_HOSP (FilterModule)
inputs
	IADhosp = HOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  = MISSING };{MAIN_DIAGNOSIS  matches "428*"};{SECONDARY_DIAGNOSIS_1 matches "428*"};{SECONDARY_DIAGNOSIS_2 matches "428*"};{SECONDARY_DIAGNOSIS_3 matches "428*"};{SECONDARY_DIAGNOSIS_4 matches "428*"};{SECONDARY_DIAGNOSIS_5 matches "428*"};{MAIN_DIAGNOSIS  matches "39891*"};{SECONDARY_DIAGNOSIS_1 matches "39891*"};{SECONDARY_DIAGNOSIS_2 matches "39891*"};{SECONDARY_DIAGNOSIS_3 matches "39891*"};{SECONDARY_DIAGNOSIS_4 matches "39891*"};{SECONDARY_DIAGNOSIS_5 matches "39891*"};{MAIN_DIAGNOSIS  matches "40201*"};{SECONDARY_DIAGNOSIS_1 matches "40201*"};{SECONDARY_DIAGNOSIS_2 matches "40201*"};{SECONDARY_DIAGNOSIS_3 matches "40201*"};{SECONDARY_DIAGNOSIS_4 matches "40201*"};{SECONDARY_DIAGNOSIS_5 matches "40201*"};{MAIN_DIAGNOSIS  matches "40211*"};{SECONDARY_DIAGNOSIS_1 matches "40211*"};{SECONDARY_DIAGNOSIS_2 matches "40211*"};{SECONDARY_DIAGNOSIS_3 matches "40211*"};{SECONDARY_DIAGNOSIS_4 matches "40211*"};{SECONDARY_DIAGNOSIS_5 matches "40211*"};{MAIN_DIAGNOSIS  matches "40291*"};{SECONDARY_DIAGNOSIS_1 matches "40291*"};{SECONDARY_DIAGNOSIS_2 matches "40291*"};{SECONDARY_DIAGNOSIS_3 matches "40291*"};{SECONDARY_DIAGNOSIS_4 matches "40291*"};{SECONDARY_DIAGNOSIS_5 matches "40291*"};{MAIN_DIAGNOSIS  matches "40401*"};{SECONDARY_DIAGNOSIS_1 matches "40401*"};{SECONDARY_DIAGNOSIS_2 matches "40401*"};{SECONDARY_DIAGNOSIS_3 matches "40401*"};{SECONDARY_DIAGNOSIS_4 matches "40401*"};{SECONDARY_DIAGNOSIS_5 matches "40401*"};{MAIN_DIAGNOSIS  matches "40403*"};{SECONDARY_DIAGNOSIS_1 matches "40403*"};{SECONDARY_DIAGNOSIS_2 matches "40403*"};{SECONDARY_DIAGNOSIS_3 matches "40403*"};{SECONDARY_DIAGNOSIS_4 matches "40403*"};{SECONDARY_DIAGNOSIS_5 matches "40403*"};{MAIN_DIAGNOSIS  matches "40411*"};{SECONDARY_DIAGNOSIS_1 matches "40411*"};{SECONDARY_DIAGNOSIS_2 matches "40411*"};{SECONDARY_DIAGNOSIS_3 matches "40411*"};{SECONDARY_DIAGNOSIS_4 matches "40411*"};{SECONDARY_DIAGNOSIS_5 matches "40411*"};{MAIN_DIAGNOSIS  matches "40413*"};{SECONDARY_DIAGNOSIS_1 matches "40413*"};{SECONDARY_DIAGNOSIS_2 matches "40413*"};{SECONDARY_DIAGNOSIS_3 matches "40413*"};{SECONDARY_DIAGNOSIS_4 matches "40413*"};{SECONDARY_DIAGNOSIS_5 matches "40413*"};{MAIN_DIAGNOSIS  matches "40491*"};{SECONDARY_DIAGNOSIS_1 matches "40491*"};{SECONDARY_DIAGNOSIS_2 matches "40491*"};{SECONDARY_DIAGNOSIS_3 matches "40491*"};{SECONDARY_DIAGNOSIS_4 matches "40491*"};{SECONDARY_DIAGNOSIS_5 matches "40491*"};{MAIN_DIAGNOSIS  matches "40493*"};{SECONDARY_DIAGNOSIS_1 matches "40493*"};{SECONDARY_DIAGNOSIS_2 matches "40493*"};{SECONDARY_DIAGNOSIS_3 matches "40493*"};{SECONDARY_DIAGNOSIS_4 matches "40493*"};{SECONDARY_DIAGNOSIS_5 matches "40493*"}]
	boolExpr = OR 
end
sortedFirst_HF_HOSP (SortModule)
inputs
	IADhosp = FFirst_HF_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end
FinalFirst_HF_HOSP (AggregateModule)
inputs
	IADhosp = sortedFirst_HF_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_HF_HOSP : date } ]
end

// HF: select from source EXE 
FFirst_HF_EXE (FilterModule)
inputs
	IADexe = EXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*428"}]
	
end
sortedFirst_HF_EXE (SortModule)
inputs
	IADexe = FFirst_HF_EXE
parameters
	fieldNames = [ PERSON_ID ]
end
FinalFirst_HF_EXE (AggregateModule)
inputs
	IADexe = sortedFirst_HF_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_HF_EXE : date } ]
end

// HYPERTE: select from source EXE 
FFirst_HYPERTE_EXE (FilterModule)
inputs
	IADexe = EXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*401"};{EXEMPTION_CODE  matches "*402"};{EXEMPTION_CODE  matches "*403"};{EXEMPTION_CODE  matches "*404"};{EXEMPTION_CODE  matches "*405"}]
	boolExpr = OR 
end
sortedFirst_HYPERTE_EXE (SortModule)
inputs
	IADexe = FFirst_HYPERTE_EXE
parameters
	fieldNames = [ PERSON_ID ]
end
FinalFirst_HYPERTE_EXE (AggregateModule)
inputs
	IADexe = sortedFirst_HYPERTE_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_HYPERTE_EXE : date } ]
end

// DEMEN: select from source DRUGS 
FFirst_DEMEN_DRUGSDRUGS (FilterModule)
inputs
	IADdrug = DRUGS
parameters
	conditions = [{ATC = "N06DA02"}]
	
end
FFirst_DEMEN_DRUGSDDRUG (FilterModule)
inputs
	IADdrug = DDRUG
parameters
	conditions = [{ATC = "N06DA02"}]
	
end
FFirst_DEMEN_DRUGSTot (UnionModule)
inputs
	IADdrug = FFirst_DEMEN_DRUGSDDRUG
	IADdrug = FFirst_DEMEN_DRUGSDRUGS
end

ClYearFirst_DEMEN_DRUGS (ExtendDataModule)
inputs
	IADdrug = FFirst_DEMEN_DRUGSTot
parameters
  attributes = [ { YearFirst_DEMEN_DRUGS: int } ]
end
YearFirst_DEMEN_DRUGS (ApplyFunction)
inputs
	custom = ClYearFirst_DEMEN_DRUGS
parameters
	function = Year(DRUG_DISPENSING_DATE)
	result   = YearFirst_DEMEN_DRUGS
	
	
end
sortedYearFirst_DEMEN_DRUGS (SortModule)
inputs
	custom = YearFirst_DEMEN_DRUGS
parameters
	fieldNames = [ PERSON_ID,YearFirst_DEMEN_DRUGS ]
end
NumberFirst_DEMEN_DRUGS (AggregateModule)
inputs
	custom = sortedYearFirst_DEMEN_DRUGS
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirst_DEMEN_DRUGS ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_DISPENSING_DATE) ]
	results =  [ { NumberFirst_DEMEN_DRUGS : int };{ DateFirstFirst_DEMEN_DRUGS : date } ]
end
FilterTwoFirst_DEMEN_DRUGS (FilterModule)
inputs
	custom = NumberFirst_DEMEN_DRUGS
parameters
	conditions = [{NumberFirst_DEMEN_DRUGS>1}]
	
end
FinalFirst_DEMEN_DRUGS (AggregateModule)
inputs
	custom = FilterTwoFirst_DEMEN_DRUGS
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirst_DEMEN_DRUGS) ]
	results =  [ {First_DEMEN_DRUGS : date} ]
end

// OLDAMI: select from source HOSP 
FFirst_OLDAMI_HOSP (FilterModule)
inputs
	IADhosp = HOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  = MISSING };{MAIN_DIAGNOSIS  matches "410*"};{SECONDARY_DIAGNOSIS_1 matches "410*"};{SECONDARY_DIAGNOSIS_2 matches "410*"};{SECONDARY_DIAGNOSIS_3 matches "410*"};{SECONDARY_DIAGNOSIS_4 matches "410*"};{SECONDARY_DIAGNOSIS_5 matches "410*"};{MAIN_DIAGNOSIS  matches "412*"};{SECONDARY_DIAGNOSIS_1 matches "412*"};{SECONDARY_DIAGNOSIS_2 matches "412*"};{SECONDARY_DIAGNOSIS_3 matches "412*"};{SECONDARY_DIAGNOSIS_4 matches "412*"};{SECONDARY_DIAGNOSIS_5 matches "412*"}]
	boolExpr = OR 
end
sortedFirst_OLDAMI_HOSP (SortModule)
inputs
	IADhosp = FFirst_OLDAMI_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end
FinalFirst_OLDAMI_HOSP (AggregateModule)
inputs
	IADhosp = sortedFirst_OLDAMI_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_OLDAMI_HOSP : date } ]
end

// GENERAL INDICATORS: filter period and sort
LastYearOUTPAT (FilterModule)
inputs
	IADoutpat = OUTPAT
parameters
	conditions = [{PROC_START_DATE >= 2011-01-01};{PROC_START_DATE <= 2011-12-31}]
	boolExpr = AND
end
sortedLastYearOUTPAT (SortModule)
inputs
	IADoutpat = LastYearOUTPAT
parameters
	fieldNames = [ PERSON_ID ]
end
LastYearDRUGS (FilterModule)
inputs
	IADdrug = DRUGS
parameters
	conditions = [{DRUG_DISPENSING_DATE >= 2011-01-01};{DRUG_DISPENSING_DATE <= 2011-12-31}]
	boolExpr = AND
end
LastYearDDRUG (FilterModule)
inputs
	IADdrug = DDRUG
parameters
	conditions = [{DRUG_DISPENSING_DATE >= 2011-01-01};{DRUG_DISPENSING_DATE <= 2011-12-31}]
	boolExpr = AND
end
LastYearDRUGSTot (UnionModule)
inputs
	IADdrug = LastYearDDRUG
	IADdrug = LastYearDRUGS
end

sortedLastYearDRUGS (SortModule)
inputs
	IADdrug = LastYearDRUGSTot
parameters
	fieldNames = [ PERSON_ID ]
end
LastYearHOSP (FilterModule)
inputs
	IADhosp = HOSP
parameters
	conditions = [{START_DATE >= 2011-01-01};{START_DATE <= 2011-12-31}]
	boolExpr = AND
end
sortedLastYearHOSP (SortModule)
inputs
	IADhosp = LastYearHOSP
parameters
	fieldNames = [ PATIENT_ID ]
end

// GENERAL INDICATORS COMPLEX: generate auxiliary functions

// Generate TypeOfProc in OUTPAT
ClsortedLastYearOUTPATEnriched (ExtendDataModule)
inputs
	IADoutpat = sortedLastYearOUTPAT
parameters
  attributes = [ { TypeOfProc: string } ]
end
sortedLastYearOUTPATEnriched (ApplyFunction)
inputs
	custom = ClsortedLastYearOUTPATEnriched
parameters
	function = TypeOfProc(PROC_COD)
	result   = TypeOfProc
	
	
end


// Load data  from HOSP

HOSP (ScriptInputModule)
parameters
	scriptFilename = LoadHOSP.txt
	inputName = HOSPFile
	expectedSchema = IADhosp
end

LightHOSP (DropModule)
inputs
	IADhosp = HOSP
parameters
	params = [ MARITAL_STATUS,ORIGIN,TYPE,TRAUMA,AUTOPTIC,DH_CAUSE,LENGTH_DH,BIRTH_WEIGTH,DATE_MAIN_PROC,BOOKING_DATE,PRIORITY ]
end



// Load data  from EXE

EXE (ScriptInputModule)
parameters
	scriptFilename = LoadEXE.txt
	inputName = EXEFile
	expectedSchema = IADexe
end

LightEXE (DropModule)
inputs
	IADexe = EXE
parameters
	params = [ EXE_END_DATE ]
end



// Load data  from PERSON

PERSON (ScriptInputModule)
parameters
	scriptFilename = LoadPERSON.txt
	inputName = PERSONFile
	expectedSchema = IADperson
end

LightPERSON (DropModule)
inputs
	IADperson = PERSON
parameters
	params = [ REG_CONCEPT_ID,LHU_PROVIDER_CONCEPT_ID,CENSUS_LOCATION_CONCEPT_ID,LOCATION_CONCEPT_ID,LHU_LOCATION_CONCEPT_ID,STARTDATE_GP,ENDDATE_GP,STARTDATE_LHU,ENDDATE_LHU ]
end



// Load data  from DRUGS

DRUGS (ScriptInputModule)
parameters
	scriptFilename = LoadDRUGS.txt
	inputName = DRUGSFile
	expectedSchema = IADdrug
end

LightDRUGS (DropModule)
inputs
	IADdrug = DRUGS
parameters
	params = [ REG_PROVIDER_ID,LHU_PROVIDER_CONCEPT_ID,EXEMPTION_CODE,EXEMPTION_LOWWAGE,PRODUCT_CODE,DURATION ]
end



// Load data  from OUTPAT

OUTPAT (ScriptInputModule)
parameters
	scriptFilename = LoadOUTPAT.txt
	inputName = OUTPATFile
	expectedSchema = IADoutpat
end

LightOUTPAT (DropModule)
inputs
	IADoutpat = OUTPAT
parameters
	params = [ REG_PROVIDER_ID,LHU_PROVIDER_CONCEPT_ID,PROC_PRESCRIPTION,FIRST_ACCESS,MAX_WAITING_TIME,EXEMPTION_CODE,EXEMPTION_LOWWAGE,DIAGNOSIS,NUMBER_OF_PROC ]
end



// Load data  from DDRUG

DDRUG (ScriptInputModule)
parameters
	scriptFilename = LoadDDRUG.txt
	inputName = DDRUGFile
	expectedSchema = IADdrug
end

LightDDRUG (DropModule)
inputs
	IADdrug = DDRUG
parameters
	params = [ REG_PROVIDER_ID,LHU_PROVIDER_CONCEPT_ID,EXEMPTION_CODE,EXEMPTION_LOWWAGE,PRODUCT_CODE,DURATION ]
end



// PREVALENT: mark prevalent at date 2012-01-01 

ClFinalPrev12M (ExtendDataModule)
inputs
	custom = LightPERSON
parameters
  attributes = [ {IsPrev12M : boolean } ]
end

FinalPrev12M (ApplyFunction)
inputs
	custom = ClFinalPrev12M
parameters
	function = Id(true)
	result   = IsPrev12M
	conditions = [ {ENDDATE > 2012-01-01};{STARTDATE <= 2012-01-01} ]
	boolExpr = AND
end

// PREVALENT: mark prevalent at date 2012-12-31

ClFinalPrevDATEENDFUP (ExtendDataModule)
inputs
	custom = FinalPrev12M
parameters
  attributes = [ {IsPrevDATEENDFUP : boolean } ]
end

FinalPrevDATEENDFUP (ApplyFunction)
inputs
	custom = ClFinalPrevDATEENDFUP
parameters
	function = Id(true)
	result   = IsPrevDATEENDFUP
	conditions = [ {ENDDATE > 2012-12-31};{STARTDATE <= 2012-12-31} ]
	boolExpr = AND
end

// PREVALENT: filter prevalent at either date 2012-01-01 or date 2012-12-31

Cohort (FilterModule)
inputs
	custom = FinalPrevDATEENDFUP
parameters
	conditions = [{IsPrev12M = true}]
	
end

// Sort Cohort

sortedCohort (SortModule)
inputs
	custom = Cohort
parameters
	fieldNames = [ PERSON_ID ]
end

// DIAB: select from source HOSP 

FFirst_DIAB_HOSP (FilterModule)
inputs
	custom = LightHOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  matches "250*"};{SECONDARY_DIAGNOSIS_1 matches "250*"};{SECONDARY_DIAGNOSIS_2 matches "250*"};{SECONDARY_DIAGNOSIS_3 matches "250*"};{SECONDARY_DIAGNOSIS_4 matches "250*"};{SECONDARY_DIAGNOSIS_5 matches "250*"}]
	boolExpr = OR 
end

sortedFirst_DIAB_HOSP (SortModule)
inputs
	custom = FFirst_DIAB_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end

FinalFirst_DIAB_HOSP (AggregateModule)
inputs
	custom = sortedFirst_DIAB_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_DIAB_HOSP : date } ]
end

// DIAB: select from source DRUGS 

FFirst_DIAB_DRUGSDRUGS (FilterModule)
inputs
	custom = LightDRUGS
parameters
	conditions = [{ATC matches "A10*"}]
	
end

FFirst_DIAB_DRUGSDDRUG (FilterModule)
inputs
	custom = LightDDRUG
parameters
	conditions = [{ATC matches "A10*"}]
	
end

FFirst_DIAB_DRUGSTot (UnionModule)
inputs
	custom = FFirst_DIAB_DRUGSDDRUG
	custom = FFirst_DIAB_DRUGSDRUGS
end


ClYearFirst_DIAB_DRUGS (ExtendDataModule)
inputs
	custom = FFirst_DIAB_DRUGSTot
parameters
  attributes = [ { YearFirst_DIAB_DRUGS: int } ]
end

YearFirst_DIAB_DRUGS (ApplyFunction)
inputs
	custom = ClYearFirst_DIAB_DRUGS
parameters
	function = Year(DRUG_DISPENSING_DATE)
	result   = YearFirst_DIAB_DRUGS
	
	
end

sortedYearFirst_DIAB_DRUGS (SortModule)
inputs
	custom = YearFirst_DIAB_DRUGS
parameters
	fieldNames = [ PERSON_ID,YearFirst_DIAB_DRUGS ]
end

NumberFirst_DIAB_DRUGS (AggregateModule)
inputs
	custom = sortedYearFirst_DIAB_DRUGS
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirst_DIAB_DRUGS ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_DISPENSING_DATE) ]
	results =  [ { NumberFirst_DIAB_DRUGS : int };{ DateFirstFirst_DIAB_DRUGS : date } ]
end

FilterTwoFirst_DIAB_DRUGS (FilterModule)
inputs
	custom = NumberFirst_DIAB_DRUGS
parameters
	conditions = [{NumberFirst_DIAB_DRUGS>1}]
	
end

FinalFirst_DIAB_DRUGS (AggregateModule)
inputs
	custom = FilterTwoFirst_DIAB_DRUGS
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirst_DIAB_DRUGS) ]
	results =  [ {First_DIAB_DRUGS : date} ]
end

// DIAB: select from source EXE 

FFirst_DIAB_EXE (FilterModule)
inputs
	custom = LightEXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*250"}]
	
end

sortedFirst_DIAB_EXE (SortModule)
inputs
	custom = FFirst_DIAB_EXE
parameters
	fieldNames = [ PERSON_ID ]
end

FinalFirst_DIAB_EXE (AggregateModule)
inputs
	custom = sortedFirst_DIAB_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_DIAB_EXE : date } ]
end

// IHD: select from source HOSP 

FFirst_IHD_HOSP (FilterModule)
inputs
	custom = LightHOSP
parameters
	conditions = [{MAIN_DIAGNOSIS = MISSING};{MAIN_DIAGNOSIS  matches "410*"};{SECONDARY_DIAGNOSIS_1 matches "410*"};{SECONDARY_DIAGNOSIS_2 matches "410*"};{SECONDARY_DIAGNOSIS_3 matches "410*"};{SECONDARY_DIAGNOSIS_4 matches "410*"};{SECONDARY_DIAGNOSIS_5 matches "410*"};{MAIN_DIAGNOSIS  matches "411*"};{SECONDARY_DIAGNOSIS_1 matches "411*"};{SECONDARY_DIAGNOSIS_2 matches "411*"};{SECONDARY_DIAGNOSIS_3 matches "411*"};{SECONDARY_DIAGNOSIS_4 matches "411*"};{SECONDARY_DIAGNOSIS_5 matches "411*"};{MAIN_DIAGNOSIS  matches "412*"};{SECONDARY_DIAGNOSIS_1 matches "412*"};{SECONDARY_DIAGNOSIS_2 matches "412*"};{SECONDARY_DIAGNOSIS_3 matches "412*"};{SECONDARY_DIAGNOSIS_4 matches "412*"};{SECONDARY_DIAGNOSIS_5 matches "412*"};{MAIN_DIAGNOSIS  matches "413*"};{SECONDARY_DIAGNOSIS_1 matches "413*"};{SECONDARY_DIAGNOSIS_2 matches "413*"};{SECONDARY_DIAGNOSIS_3 matches "413*"};{SECONDARY_DIAGNOSIS_4 matches "413*"};{SECONDARY_DIAGNOSIS_5 matches "413*"};{MAIN_DIAGNOSIS  matches "414*"};{SECONDARY_DIAGNOSIS_1 matches "414*"};{SECONDARY_DIAGNOSIS_2 matches "414*"};{SECONDARY_DIAGNOSIS_3 matches "414*"};{SECONDARY_DIAGNOSIS_4 matches "414*"};{SECONDARY_DIAGNOSIS_5 matches "414*"}]
	boolExpr = OR 
end

sortedFirst_IHD_HOSP (SortModule)
inputs
	custom = FFirst_IHD_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end

FinalFirst_IHD_HOSP (AggregateModule)
inputs
	custom = sortedFirst_IHD_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_IHD_HOSP : date } ]
end

// IHD: select from source DRUGS 

FFirst_IHD_DRUGSDRUGS (FilterModule)
inputs
	custom = LightDRUGS
parameters
	conditions = [{ATC matches "C01DA*"}]
	
end

FFirst_IHD_DRUGSDDRUG (FilterModule)
inputs
	custom = LightDDRUG
parameters
	conditions = [{ATC matches "C01DA*"}]
	
end

FFirst_IHD_DRUGSTot (UnionModule)
inputs
	custom = FFirst_IHD_DRUGSDDRUG
	custom = FFirst_IHD_DRUGSDRUGS
end


ClYearFirst_IHD_DRUGS (ExtendDataModule)
inputs
	custom = FFirst_IHD_DRUGSTot
parameters
  attributes = [ { YearFirst_IHD_DRUGS: int } ]
end

YearFirst_IHD_DRUGS (ApplyFunction)
inputs
	custom = ClYearFirst_IHD_DRUGS
parameters
	function = Year(DRUG_DISPENSING_DATE)
	result   = YearFirst_IHD_DRUGS
	
	
end

sortedYearFirst_IHD_DRUGS (SortModule)
inputs
	custom = YearFirst_IHD_DRUGS
parameters
	fieldNames = [ PERSON_ID,YearFirst_IHD_DRUGS ]
end

NumberFirst_IHD_DRUGS (AggregateModule)
inputs
	custom = sortedYearFirst_IHD_DRUGS
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirst_IHD_DRUGS ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_DISPENSING_DATE) ]
	results =  [ { NumberFirst_IHD_DRUGS : int };{ DateFirstFirst_IHD_DRUGS : date } ]
end

FilterTwoFirst_IHD_DRUGS (FilterModule)
inputs
	custom = NumberFirst_IHD_DRUGS
parameters
	conditions = [{NumberFirst_IHD_DRUGS>1}]
	
end

FinalFirst_IHD_DRUGS (AggregateModule)
inputs
	custom = FilterTwoFirst_IHD_DRUGS
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirst_IHD_DRUGS) ]
	results =  [ {First_IHD_DRUGS : date} ]
end

// IHD: select from source EXE 

FFirst_IHD_EXE (FilterModule)
inputs
	custom = LightEXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*414"}]
	
end

sortedFirst_IHD_EXE (SortModule)
inputs
	custom = FFirst_IHD_EXE
parameters
	fieldNames = [ PERSON_ID ]
end

FinalFirst_IHD_EXE (AggregateModule)
inputs
	custom = sortedFirst_IHD_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_IHD_EXE : date } ]
end

// HF: select from source HOSP 

FFirst_HF_HOSP (FilterModule)
inputs
	custom = LightHOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  = MISSING };{MAIN_DIAGNOSIS  matches "428*"};{SECONDARY_DIAGNOSIS_1 matches "428*"};{SECONDARY_DIAGNOSIS_2 matches "428*"};{SECONDARY_DIAGNOSIS_3 matches "428*"};{SECONDARY_DIAGNOSIS_4 matches "428*"};{SECONDARY_DIAGNOSIS_5 matches "428*"};{MAIN_DIAGNOSIS  matches "39891*"};{SECONDARY_DIAGNOSIS_1 matches "39891*"};{SECONDARY_DIAGNOSIS_2 matches "39891*"};{SECONDARY_DIAGNOSIS_3 matches "39891*"};{SECONDARY_DIAGNOSIS_4 matches "39891*"};{SECONDARY_DIAGNOSIS_5 matches "39891*"};{MAIN_DIAGNOSIS  matches "40201*"};{SECONDARY_DIAGNOSIS_1 matches "40201*"};{SECONDARY_DIAGNOSIS_2 matches "40201*"};{SECONDARY_DIAGNOSIS_3 matches "40201*"};{SECONDARY_DIAGNOSIS_4 matches "40201*"};{SECONDARY_DIAGNOSIS_5 matches "40201*"};{MAIN_DIAGNOSIS  matches "40211*"};{SECONDARY_DIAGNOSIS_1 matches "40211*"};{SECONDARY_DIAGNOSIS_2 matches "40211*"};{SECONDARY_DIAGNOSIS_3 matches "40211*"};{SECONDARY_DIAGNOSIS_4 matches "40211*"};{SECONDARY_DIAGNOSIS_5 matches "40211*"};{MAIN_DIAGNOSIS  matches "40291*"};{SECONDARY_DIAGNOSIS_1 matches "40291*"};{SECONDARY_DIAGNOSIS_2 matches "40291*"};{SECONDARY_DIAGNOSIS_3 matches "40291*"};{SECONDARY_DIAGNOSIS_4 matches "40291*"};{SECONDARY_DIAGNOSIS_5 matches "40291*"};{MAIN_DIAGNOSIS  matches "40401*"};{SECONDARY_DIAGNOSIS_1 matches "40401*"};{SECONDARY_DIAGNOSIS_2 matches "40401*"};{SECONDARY_DIAGNOSIS_3 matches "40401*"};{SECONDARY_DIAGNOSIS_4 matches "40401*"};{SECONDARY_DIAGNOSIS_5 matches "40401*"};{MAIN_DIAGNOSIS  matches "40403*"};{SECONDARY_DIAGNOSIS_1 matches "40403*"};{SECONDARY_DIAGNOSIS_2 matches "40403*"};{SECONDARY_DIAGNOSIS_3 matches "40403*"};{SECONDARY_DIAGNOSIS_4 matches "40403*"};{SECONDARY_DIAGNOSIS_5 matches "40403*"};{MAIN_DIAGNOSIS  matches "40411*"};{SECONDARY_DIAGNOSIS_1 matches "40411*"};{SECONDARY_DIAGNOSIS_2 matches "40411*"};{SECONDARY_DIAGNOSIS_3 matches "40411*"};{SECONDARY_DIAGNOSIS_4 matches "40411*"};{SECONDARY_DIAGNOSIS_5 matches "40411*"};{MAIN_DIAGNOSIS  matches "40413*"};{SECONDARY_DIAGNOSIS_1 matches "40413*"};{SECONDARY_DIAGNOSIS_2 matches "40413*"};{SECONDARY_DIAGNOSIS_3 matches "40413*"};{SECONDARY_DIAGNOSIS_4 matches "40413*"};{SECONDARY_DIAGNOSIS_5 matches "40413*"};{MAIN_DIAGNOSIS  matches "40491*"};{SECONDARY_DIAGNOSIS_1 matches "40491*"};{SECONDARY_DIAGNOSIS_2 matches "40491*"};{SECONDARY_DIAGNOSIS_3 matches "40491*"};{SECONDARY_DIAGNOSIS_4 matches "40491*"};{SECONDARY_DIAGNOSIS_5 matches "40491*"};{MAIN_DIAGNOSIS  matches "40493*"};{SECONDARY_DIAGNOSIS_1 matches "40493*"};{SECONDARY_DIAGNOSIS_2 matches "40493*"};{SECONDARY_DIAGNOSIS_3 matches "40493*"};{SECONDARY_DIAGNOSIS_4 matches "40493*"};{SECONDARY_DIAGNOSIS_5 matches "40493*"}]
	boolExpr = OR 
end

sortedFirst_HF_HOSP (SortModule)
inputs
	custom = FFirst_HF_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end

FinalFirst_HF_HOSP (AggregateModule)
inputs
	custom = sortedFirst_HF_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_HF_HOSP : date } ]
end

// HF: select from source EXE 

FFirst_HF_EXE (FilterModule)
inputs
	custom = LightEXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*428"}]
	
end

sortedFirst_HF_EXE (SortModule)
inputs
	custom = FFirst_HF_EXE
parameters
	fieldNames = [ PERSON_ID ]
end

FinalFirst_HF_EXE (AggregateModule)
inputs
	custom = sortedFirst_HF_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_HF_EXE : date } ]
end

// HYPERTE: select from source EXE 

FFirst_HYPERTE_EXE (FilterModule)
inputs
	custom = LightEXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*401"};{EXEMPTION_CODE  matches "*402"};{EXEMPTION_CODE  matches "*403"};{EXEMPTION_CODE  matches "*404"};{EXEMPTION_CODE  matches "*405"}]
	boolExpr = OR 
end

sortedFirst_HYPERTE_EXE (SortModule)
inputs
	custom = FFirst_HYPERTE_EXE
parameters
	fieldNames = [ PERSON_ID ]
end

FinalFirst_HYPERTE_EXE (AggregateModule)
inputs
	custom = sortedFirst_HYPERTE_EXE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { First_HYPERTE_EXE : date } ]
end

// DEMEN: select from source DRUGS 

FFirst_DEMEN_DRUGSDRUGS (FilterModule)
inputs
	custom = LightDRUGS
parameters
	conditions = [{ATC = "N06DA02"}]
	
end

FFirst_DEMEN_DRUGSDDRUG (FilterModule)
inputs
	custom = LightDDRUG
parameters
	conditions = [{ATC = "N06DA02"}]
	
end

FFirst_DEMEN_DRUGSTot (UnionModule)
inputs
	custom = FFirst_DEMEN_DRUGSDDRUG
	custom = FFirst_DEMEN_DRUGSDRUGS
end


ClYearFirst_DEMEN_DRUGS (ExtendDataModule)
inputs
	custom = FFirst_DEMEN_DRUGSTot
parameters
  attributes = [ { YearFirst_DEMEN_DRUGS: int } ]
end

YearFirst_DEMEN_DRUGS (ApplyFunction)
inputs
	custom = ClYearFirst_DEMEN_DRUGS
parameters
	function = Year(DRUG_DISPENSING_DATE)
	result   = YearFirst_DEMEN_DRUGS
	
	
end

sortedYearFirst_DEMEN_DRUGS (SortModule)
inputs
	custom = YearFirst_DEMEN_DRUGS
parameters
	fieldNames = [ PERSON_ID,YearFirst_DEMEN_DRUGS ]
end

NumberFirst_DEMEN_DRUGS (AggregateModule)
inputs
	custom = sortedYearFirst_DEMEN_DRUGS
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirst_DEMEN_DRUGS ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_DISPENSING_DATE) ]
	results =  [ { NumberFirst_DEMEN_DRUGS : int };{ DateFirstFirst_DEMEN_DRUGS : date } ]
end

FilterTwoFirst_DEMEN_DRUGS (FilterModule)
inputs
	custom = NumberFirst_DEMEN_DRUGS
parameters
	conditions = [{NumberFirst_DEMEN_DRUGS>1}]
	
end

FinalFirst_DEMEN_DRUGS (AggregateModule)
inputs
	custom = FilterTwoFirst_DEMEN_DRUGS
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirst_DEMEN_DRUGS) ]
	results =  [ {First_DEMEN_DRUGS : date} ]
end

// OLDAMI: select from source HOSP 

FFirst_OLDAMI_HOSP (FilterModule)
inputs
	custom = LightHOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  = MISSING };{MAIN_DIAGNOSIS  matches "410*"};{SECONDARY_DIAGNOSIS_1 matches "410*"};{SECONDARY_DIAGNOSIS_2 matches "410*"};{SECONDARY_DIAGNOSIS_3 matches "410*"};{SECONDARY_DIAGNOSIS_4 matches "410*"};{SECONDARY_DIAGNOSIS_5 matches "410*"};{MAIN_DIAGNOSIS  matches "412*"};{SECONDARY_DIAGNOSIS_1 matches "412*"};{SECONDARY_DIAGNOSIS_2 matches "412*"};{SECONDARY_DIAGNOSIS_3 matches "412*"};{SECONDARY_DIAGNOSIS_4 matches "412*"};{SECONDARY_DIAGNOSIS_5 matches "412*"}]
	boolExpr = OR 
end

sortedFirst_OLDAMI_HOSP (SortModule)
inputs
	custom = FFirst_OLDAMI_HOSP
parameters
	fieldNames = [ PATIENT_ID ]
end

FinalFirst_OLDAMI_HOSP (AggregateModule)
inputs
	custom = sortedFirst_OLDAMI_HOSP
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { First_OLDAMI_HOSP : date } ]
end

// GENERAL INDICATORS PREPARE SOURCES: filter period, enrich with auxiliary variables and sort

// GENERAL INDICATORS PREPARE SOURCES - prepare HOSP

LastYearHOSP (FilterModule)
inputs
	custom = LightHOSP
parameters
	conditions = [{START_DATE >= 2012-01-01};{START_DATE <= 2012-12-31}]
	boolExpr = AND
end

// Generate TypeOfFullWard in HOSP

ClLastYearHOSPEnriched1 (ExtendDataModule)
inputs
	custom = LastYearHOSP
parameters
  attributes = [ { TypeOfFullWard: string } ]
end

LastYearHOSPEnriched1 (ApplyFunction)
inputs
	custom = ClLastYearHOSPEnriched1
parameters
	function = TypeOfFullWard(WARD_DISCHARGE)
	result   = TypeOfFullWard
	
	
end

// Generate TypeOfDRG

ClLastYearHOSPEnriched2 (ExtendDataModule)
inputs
	custom = LastYearHOSPEnriched1
parameters
  attributes = [ { TypeOfDRG: string } ]
end

LastYearHOSPEnriched2 (ApplyFunction)
inputs
	custom = ClLastYearHOSPEnriched2
parameters
	function = Id("MED")
	result   = TypeOfDRG
	conditions = [ {START_DATE<1900-01-01} ; {DRG = "9"} ; {DRG = "009"} ; {DRG = "10"} ; {DRG = "010"} ; {DRG = "11"} ; {DRG = "011"} ; {DRG = "12"} ; {DRG = "012"} ; {DRG = "13"} ; {DRG = "013"} ; {DRG = "14"} ; {DRG = "014"} ; {DRG = "15"} ; {DRG = "015"} ; {DRG = "16"} ; {DRG = "016"} ; {DRG = "17"} ; {DRG = "017"} ; {DRG = "18"} ; {DRG = "018"} ; {DRG = "19"} ; {DRG = "019"} ; {DRG = "21"} ; {DRG = "021"} ; {DRG = "22"} ; {DRG = "022"} ; {DRG = "23"} ; {DRG = "023"} ; {DRG = "26"} ; {DRG = "026"} ; {DRG = "27"} ; {DRG = "027"} ; {DRG = "28"} ; {DRG = "028"} ; {DRG = "29"} ; {DRG = "029"} ; {DRG = "30"} ; {DRG = "030"} ; {DRG = "31"} ; {DRG = "031"} ; {DRG = "32"} ; {DRG = "032"} ; {DRG = "33"} ; {DRG = "033"} ; {DRG = "34"} ; {DRG = "034"} ; {DRG = "35"} ; {DRG = "035"} ; {DRG = "43"} ; {DRG = "043"} ; {DRG = "44"} ; {DRG = "044"} ; {DRG = "45"} ; {DRG = "045"} ; {DRG = "46"} ; {DRG = "046"} ; {DRG = "47"} ; {DRG = "047"} ; {DRG = "48"} ; {DRG = "048"} ; {DRG = "64"} ; {DRG = "064"} ; {DRG = "65"} ; {DRG = "065"} ; {DRG = "66"} ; {DRG = "066"} ; {DRG = "67"} ; {DRG = "067"} ; {DRG = "68"} ; {DRG = "068"} ; {DRG = "69"} ; {DRG = "069"} ; {DRG = "70"} ; {DRG = "070"} ; {DRG = "71"} ; {DRG = "071"} ; {DRG = "72"} ; {DRG = "072"} ; {DRG = "73"} ; {DRG = "073"} ; {DRG = "74"} ; {DRG = "074"} ; {DRG = "78"} ; {DRG = "078"} ; {DRG = "79"} ; {DRG = "079"} ; {DRG = "80"} ; {DRG = "080"} ; {DRG = "81"} ; {DRG = "081"} ; {DRG = "82"} ; {DRG = "082"} ; {DRG = "83"} ; {DRG = "083"} ; {DRG = "84"} ; {DRG = "084"} ; {DRG = "85"} ; {DRG = "085"} ; {DRG = "86"} ; {DRG = "086"} ; {DRG = "87"} ; {DRG = "087"} ; {DRG = "88"} ; {DRG = "088"} ; {DRG = "89"} ; {DRG = "089"} ; {DRG = "90"} ; {DRG = "090"} ; {DRG = "91"} ; {DRG = "091"} ; {DRG = "92"} ; {DRG = "092"} ; {DRG = "93"} ; {DRG = "093"} ; {DRG = "94"} ; {DRG = "094"} ; {DRG = "95"} ; {DRG = "095"} ; {DRG = "96"} ; {DRG = "096"} ; {DRG = "97"} ; {DRG = "097"} ; {DRG = "98"} ; {DRG = "098"} ; {DRG = "99"} ; {DRG = "099"} ; {DRG = "100"} ; {DRG = "101"} ; {DRG = "102"} ; {DRG = "121"} ; {DRG = "122"} ; {DRG = "123"} ; {DRG = "124"} ; {DRG = "125"} ; {DRG = "126"} ; {DRG = "127"} ; {DRG = "128"} ; {DRG = "129"} ; {DRG = "130"} ; {DRG = "131"} ; {DRG = "132"} ; {DRG = "133"} ; {DRG = "134"} ; {DRG = "135"} ; {DRG = "136"} ; {DRG = "137"} ; {DRG = "138"} ; {DRG = "139"} ; {DRG = "140"} ; {DRG = "141"} ; {DRG = "142"} ; {DRG = "143"} ; {DRG = "144"} ; {DRG = "145"} ; {DRG = "172"} ; {DRG = "173"} ; {DRG = "174"} ; {DRG = "175"} ; {DRG = "176"} ; {DRG = "177"} ; {DRG = "178"} ; {DRG = "179"} ; {DRG = "180"} ; {DRG = "181"} ; {DRG = "182"} ; {DRG = "183"} ; {DRG = "184"} ; {DRG = "185"} ; {DRG = "186"} ; {DRG = "187"} ; {DRG = "188"} ; {DRG = "189"} ; {DRG = "190"} ; {DRG = "202"} ; {DRG = "203"} ; {DRG = "204"} ; {DRG = "205"} ; {DRG = "206"} ; {DRG = "207"} ; {DRG = "208"} ; {DRG = "235"} ; {DRG = "236"} ; {DRG = "237"} ; {DRG = "238"} ; {DRG = "239"} ; {DRG = "240"} ; {DRG = "241"} ; {DRG = "242"} ; {DRG = "243"} ; {DRG = "244"} ; {DRG = "245"} ; {DRG = "246"} ; {DRG = "247"} ; {DRG = "248"} ; {DRG = "249"} ; {DRG = "250"} ; {DRG = "251"} ; {DRG = "252"} ; {DRG = "253"} ; {DRG = "254"} ; {DRG = "255"} ; {DRG = "256"} ; {DRG = "271"} ; {DRG = "272"} ; {DRG = "273"} ; {DRG = "274"} ; {DRG = "275"} ; {DRG = "276"} ; {DRG = "277"} ; {DRG = "278"} ; {DRG = "279"} ; {DRG = "280"} ; {DRG = "281"} ; {DRG = "282"} ; {DRG = "283"} ; {DRG = "284"} ; {DRG = "294"} ; {DRG = "295"} ; {DRG = "296"} ; {DRG = "297"} ; {DRG = "298"} ; {DRG = "299"} ; {DRG = "300"} ; {DRG = "301"} ; {DRG = "316"} ; {DRG = "317"} ; {DRG = "318"} ; {DRG = "319"} ; {DRG = "320"} ; {DRG = "321"} ; {DRG = "322"} ; {DRG = "323"} ; {DRG = "324"} ; {DRG = "325"} ; {DRG = "326"} ; {DRG = "327"} ; {DRG = "328"} ; {DRG = "329"} ; {DRG = "330"} ; {DRG = "331"} ; {DRG = "332"} ; {DRG = "333"} ; {DRG = "346"} ; {DRG = "347"} ; {DRG = "348"} ; {DRG = "349"} ; {DRG = "350"} ; {DRG = "351"} ; {DRG = "352"} ; {DRG = "366"} ; {DRG = "367"} ; {DRG = "368"} ; {DRG = "369"} ; {DRG = "372"} ; {DRG = "373"} ; {DRG = "376"} ; {DRG = "378"} ; {DRG = "379"} ; {DRG = "380"} ; {DRG = "382"} ; {DRG = "383"} ; {DRG = "384"} ; {DRG = "385"} ; {DRG = "386"} ; {DRG = "387"} ; {DRG = "388"} ; {DRG = "389"} ; {DRG = "390"} ; {DRG = "391"} ; {DRG = "395"} ; {DRG = "396"} ; {DRG = "397"} ; {DRG = "398"} ; {DRG = "399"} ; {DRG = "403"} ; {DRG = "404"} ; {DRG = "405"} ; {DRG = "409"} ; {DRG = "410"} ; {DRG = "411"} ; {DRG = "412"} ; {DRG = "413"} ; {DRG = "414"} ; {DRG = "417"} ; {DRG = "418"} ; {DRG = "419"} ; {DRG = "420"} ; {DRG = "421"} ; {DRG = "422"} ; {DRG = "423"} ; {DRG = "425"} ; {DRG = "426"} ; {DRG = "427"} ; {DRG = "428"} ; {DRG = "429"} ; {DRG = "430"} ; {DRG = "431"} ; {DRG = "432"} ; {DRG = "433"} ; {DRG = "444"} ; {DRG = "445"} ; {DRG = "446"} ; {DRG = "447"} ; {DRG = "448"} ; {DRG = "449"} ; {DRG = "450"} ; {DRG = "451"} ; {DRG = "452"} ; {DRG = "453"} ; {DRG = "454"} ; {DRG = "455"} ; {DRG = "462"} ; {DRG = "463"} ; {DRG = "464"} ; {DRG = "465"} ; {DRG = "466"} ; {DRG = "467"} ; {DRG = "469"} ; {DRG = "470"} ; {DRG = "473"} ; {DRG = "487"} ; {DRG = "489"} ; {DRG = "490"} ; {DRG = "492"} ; {DRG = "505"} ; {DRG = "508"} ; {DRG = "509"} ; {DRG = "510"} ; {DRG = "511"} ; {DRG = "521"} ; {DRG = "522"} ; {DRG = "523"} ; {DRG = "524"} ; {DRG = "559"} ; {DRG = "560"} ; {DRG = "561"} ; {DRG = "562"} ; {DRG = "563"} ; {DRG = "564"} ; {DRG = "565"} ; {DRG = "566"} ; {DRG = "571"} ; {DRG = "572"} ; {DRG = "574"} ; {DRG = "575"} ; {DRG = "576"} ]
	boolExpr = OR
end

LastYearHOSPEnriched (ApplyFunction)
inputs
	custom = LastYearHOSPEnriched2
parameters
	function = Id("CHI")
	result   = TypeOfDRG
	conditions = [ {START_DATE<1900-01-01} ; {DRG = "1"} ; {DRG = "2"} ; {DRG = "3"} ; {DRG = "6"} ; {DRG = "7"} ; {DRG = "8"} ; {DRG = "36"} ; {DRG = "37"} ; {DRG = "38"} ; {DRG = "39"} ; {DRG = "40"} ; {DRG = "41"} ; {DRG = "42"} ; {DRG = "49"} ; {DRG = "50"} ; {DRG = "51"} ; {DRG = "52"} ; {DRG = "53"} ; {DRG = "54"} ; {DRG = "55"} ; {DRG = "56"} ; {DRG = "57"} ; {DRG = "58"} ; {DRG = "59"} ; {DRG = "60"} ; {DRG = "61"} ; {DRG = "62"} ; {DRG = "63"} ; {DRG = "75"} ; {DRG = "76"} ; {DRG = "77"} ; {DRG = "103"} ; {DRG = "104"} ; {DRG = "105"} ; {DRG = "106"} ; {DRG = "108"} ; {DRG = "110"} ; {DRG = "111"} ; {DRG = "113"} ; {DRG = "114"} ; {DRG = "117"} ; {DRG = "118"} ; {DRG = "119"} ; {DRG = "120"} ; {DRG = "146"} ; {DRG = "147"} ; {DRG = "149"} ; {DRG = "150"} ; {DRG = "151"} ; {DRG = "152"} ; {DRG = "153"} ; {DRG = "155"} ; {DRG = "156"} ; {DRG = "157"} ; {DRG = "158"} ; {DRG = "159"} ; {DRG = "160"} ; {DRG = "161"} ; {DRG = "162"} ; {DRG = "163"} ; {DRG = "164"} ; {DRG = "165"} ; {DRG = "166"} ; {DRG = "167"} ; {DRG = "168"} ; {DRG = "169"} ; {DRG = "170"} ; {DRG = "171"} ; {DRG = "191"} ; {DRG = "192"} ; {DRG = "193"} ; {DRG = "194"} ; {DRG = "195"} ; {DRG = "196"} ; {DRG = "197"} ; {DRG = "198"} ; {DRG = "199"} ; {DRG = "200"} ; {DRG = "201"} ; {DRG = "210"} ; {DRG = "211"} ; {DRG = "212"} ; {DRG = "213"} ; {DRG = "216"} ; {DRG = "217"} ; {DRG = "218"} ; {DRG = "219"} ; {DRG = "220"} ; {DRG = "223"} ; {DRG = "224"} ; {DRG = "225"} ; {DRG = "226"} ; {DRG = "227"} ; {DRG = "228"} ; {DRG = "229"} ; {DRG = "230"} ; {DRG = "232"} ; {DRG = "233"} ; {DRG = "234"} ; {DRG = "257"} ; {DRG = "258"} ; {DRG = "259"} ; {DRG = "260"} ; {DRG = "261"} ; {DRG = "262"} ; {DRG = "263"} ; {DRG = "264"} ; {DRG = "265"} ; {DRG = "266"} ; {DRG = "267"} ; {DRG = "268"} ; {DRG = "269"} ; {DRG = "270"} ; {DRG = "285"} ; {DRG = "286"} ; {DRG = "287"} ; {DRG = "288"} ; {DRG = "289"} ; {DRG = "290"} ; {DRG = "291"} ; {DRG = "292"} ; {DRG = "293"} ; {DRG = "302"} ; {DRG = "303"} ; {DRG = "304"} ; {DRG = "305"} ; {DRG = "306"} ; {DRG = "307"} ; {DRG = "308"} ; {DRG = "309"} ; {DRG = "310"} ; {DRG = "311"} ; {DRG = "312"} ; {DRG = "313"} ; {DRG = "314"} ; {DRG = "315"} ; {DRG = "334"} ; {DRG = "335"} ; {DRG = "336"} ; {DRG = "337"} ; {DRG = "338"} ; {DRG = "339"} ; {DRG = "340"} ; {DRG = "341"} ; {DRG = "342"} ; {DRG = "343"} ; {DRG = "344"} ; {DRG = "345"} ; {DRG = "353"} ; {DRG = "354"} ; {DRG = "355"} ; {DRG = "356"} ; {DRG = "357"} ; {DRG = "358"} ; {DRG = "359"} ; {DRG = "360"} ; {DRG = "361"} ; {DRG = "362"} ; {DRG = "363"} ; {DRG = "364"} ; {DRG = "365"} ; {DRG = "370"} ; {DRG = "371"} ; {DRG = "374"} ; {DRG = "375"} ; {DRG = "377"} ; {DRG = "381"} ; {DRG = "392"} ; {DRG = "393"} ; {DRG = "394"} ; {DRG = "401"} ; {DRG = "402"} ; {DRG = "406"} ; {DRG = "407"} ; {DRG = "408"} ; {DRG = "424"} ; {DRG = "439"} ; {DRG = "440"} ; {DRG = "441"} ; {DRG = "442"} ; {DRG = "443"} ; {DRG = "461"} ; {DRG = "468"} ; {DRG = "471"} ; {DRG = "476"} ; {DRG = "477"} ; {DRG = "479"} ; {DRG = "480"} ; {DRG = "481"} ; {DRG = "482"} ; {DRG = "484"} ; {DRG = "485"} ; {DRG = "486"} ; {DRG = "488"} ; {DRG = "491"} ; {DRG = "493"} ; {DRG = "494"} ; {DRG = "495"} ; {DRG = "496"} ; {DRG = "497"} ; {DRG = "498"} ; {DRG = "499"} ; {DRG = "500"} ; {DRG = "501"} ; {DRG = "502"} ; {DRG = "503"} ; {DRG = "504"} ; {DRG = "506"} ; {DRG = "507"} ; {DRG = "512"} ; {DRG = "513"} ; {DRG = "515"} ; {DRG = "518"} ; {DRG = "519"} ; {DRG = "520"} ; {DRG = "525"} ; {DRG = "528"} ; {DRG = "529"} ; {DRG = "530"} ; {DRG = "531"} ; {DRG = "532"} ; {DRG = "533"} ; {DRG = "534"} ; {DRG = "535"} ; {DRG = "536"} ; {DRG = "537"} ; {DRG = "538"} ; {DRG = "539"} ; {DRG = "540"} ; {DRG = "541"} ; {DRG = "542"} ; {DRG = "543"} ; {DRG = "544"} ; {DRG = "545"} ; {DRG = "546"} ; {DRG = "547"} ; {DRG = "548"} ; {DRG = "549"} ; {DRG = "550"} ; {DRG = "551"} ; {DRG = "552"} ; {DRG = "553"} ; {DRG = "554"} ; {DRG = "555"} ; {DRG = "556"} ; {DRG = "557"} ; {DRG = "558"} ; {DRG = "567"} ; {DRG = "568"} ; {DRG = "569"} ; {DRG = "570"} ; {DRG = "573"} ; {DRG = "577"} ; {DRG = "578"} ; {DRG = "579"} ]
	boolExpr = OR
end

// Sort HOSP

sortedLastYearHOSP (SortModule)
inputs
	custom = LastYearHOSPEnriched
parameters
	fieldNames = [ PATIENT_ID ]
end

// GENERAL INDICATORS PREPARE SOURCES - prepare DRUGS

LastYearDRUGS (FilterModule)
inputs
	custom = LightDRUGS
parameters
	conditions = [{DRUG_DISPENSING_DATE >= 2012-01-01};{DRUG_DISPENSING_DATE <= 2012-12-31}]
	boolExpr = AND
end

LastYearDDRUG (FilterModule)
inputs
	custom = LightDDRUG
parameters
	conditions = [{DRUG_DISPENSING_DATE >= 2012-01-01};{DRUG_DISPENSING_DATE <= 2012-12-31}]
	boolExpr = AND
end

LastYearDRUGSTot (UnionModule)
inputs
	custom = LastYearDDRUG
	custom = LastYearDRUGS
end

// Sort DRUGS

sortedLastYearDRUGS (SortModule)
inputs
	custom = LastYearDRUGSTot
parameters
	fieldNames = [ PERSON_ID ]
end

// GENERAL INDICATORS PREPARE SOURCES - prepare OUTPAT

LastYearOUTPAT (FilterModule)
inputs
	custom = LightOUTPAT
parameters
	conditions = [{PROC_START_DATE >= 2012-01-01};{PROC_START_DATE <= 2012-12-31}]
	boolExpr = AND
end

// Generate TypeOfProc in OUTPAT

ClLastYearOUTPATEnriched1 (ExtendDataModule)
inputs
	custom = LastYearOUTPAT
parameters
  attributes = [ { TypeOfProc: string } ]
end

LastYearOUTPATEnriched1 (ApplyFunction)
inputs
	custom = ClLastYearOUTPATEnriched1
parameters
	function = TypeOfProc(PROC_COD)
	result   = TypeOfProc
	
	
end

// Generate IsGeneralVisit in OUTPAT

ClLastYearOUTPATEnriched (ExtendDataModule)
inputs
	custom = LastYearOUTPATEnriched1
parameters
  attributes = [ { IsGeneralVisit: boolean = false} ]
end

LastYearOUTPATEnriched (ApplyFunction)
inputs
	custom = ClLastYearOUTPATEnriched
parameters
	function = Id(true)
	result   = IsGeneralVisit
	conditions = [{PROC_COD  = "89.7"} ; {PROC_COD  = "89.01"} ; {PROC_COD  = "89.07"} ; {PROC_COD  = "89.03"}; {PROC_COD  = "897"} ; {PROC_COD  = "8901"} ; {PROC_COD  = "8907"} ; {PROC_COD  = "8903"}]
	boolExpr = OR
end

// Sort OUTPAT

sortedLastYearOUTPAT (SortModule)
inputs
	custom = LastYearOUTPATEnriched
parameters
	fieldNames = [ PERSON_ID ]
end

// INDICATORS FOR GENERAL POPULATION: TARIFFA_LORDO_FARMACI 

FTARIFFA_LORDO_FARMACI (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{DRUG_DISPENSING_DATE>1900-01-01}]
	
end

ATARIFFA_LORDO_FARMACI (AggregateModule)
inputs
	custom = FTARIFFA_LORDO_FARMACI
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT(DRUG_DISPENSING_DATE),SUM(COST) ]
	results =  [ { NumberTARIFFA_LORDO_FARMACI: int };{ CostTARIFFA_LORDO_FARMACI: float } ]
end

FinalTARIFFA_LORDO_FARMACI (RenameAttributesModule)
inputs
	custom = ATARIFFA_LORDO_FARMACI
parameters
	inputAttributes = [ CostTARIFFA_LORDO_FARMACI ]
	outputAttributes   = [ TARIFFA_LORDO_FARMACI ]
end



// INDICATORS FOR GENERAL POPULATION: NUM_PRESC_FARM 

FNUM_PRESC_FARM (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{DRUG_DISPENSING_DATE>1900-01-01}]
	
end

ANUM_PRESC_FARM (AggregateModule)
inputs
	custom = FNUM_PRESC_FARM
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT(DRUG_DISPENSING_DATE),SUM(COST) ]
	results =  [ { NumberNUM_PRESC_FARM: int };{ CostNUM_PRESC_FARM: float } ]
end

FinalNUM_PRESC_FARM (RenameAttributesModule)
inputs
	custom = ANUM_PRESC_FARM
parameters
	inputAttributes = [ NumberNUM_PRESC_FARM ]
	outputAttributes   = [ NUM_PRESC_FARM ]
end



// INDICATORS FOR GENERAL POPULATION: NUM_RIC 

FNUM_RIC (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{START_DATE>1900-01-01}]
	
end

ANUM_RIC (AggregateModule)
inputs
	custom = FNUM_RIC
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberNUM_RIC: int };{ CostNUM_RIC: float } ]
end

FinalNUM_RIC (RenameAttributesModule)
inputs
	custom = ANUM_RIC
parameters
	inputAttributes = [ NumberNUM_RIC ]
	outputAttributes   = [ NUM_RIC ]
end



// INDICATORS FOR GENERAL POPULATION: TARIFFA_LORDO_RIC 

FTARIFFA_LORDO_RIC (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{START_DATE>1900-01-01}]
	
end

ATARIFFA_LORDO_RIC (AggregateModule)
inputs
	custom = FTARIFFA_LORDO_RIC
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTARIFFA_LORDO_RIC: int };{ CostTARIFFA_LORDO_RIC: float } ]
end

FinalTARIFFA_LORDO_RIC (RenameAttributesModule)
inputs
	custom = ATARIFFA_LORDO_RIC
parameters
	inputAttributes = [ CostTARIFFA_LORDO_RIC ]
	outputAttributes   = [ TARIFFA_LORDO_RIC ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_OSPACDRGMED 

FTAR_OSPACDRGMED (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{TypeOfDRG="MED"} ; {TypeOfFullWard="AC"} ; {REGIME="1"}]
	boolExpr = AND
end

ATAR_OSPACDRGMED (AggregateModule)
inputs
	custom = FTAR_OSPACDRGMED
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_OSPACDRGMED: int };{ CostTAR_OSPACDRGMED: float } ]
end

FinalTAR_OSPACDRGMED (RenameAttributesModule)
inputs
	custom = ATAR_OSPACDRGMED
parameters
	inputAttributes = [ CostTAR_OSPACDRGMED ]
	outputAttributes   = [ TAR_OSPACDRGMED ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_OSPACDRGCHI 

FTAR_OSPACDRGCHI (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{TypeOfDRG="CHI"} ; {TypeOfFullWard="AC"} ; {REGIME="1"}]
	boolExpr = AND
end

ATAR_OSPACDRGCHI (AggregateModule)
inputs
	custom = FTAR_OSPACDRGCHI
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_OSPACDRGCHI: int };{ CostTAR_OSPACDRGCHI: float } ]
end

FinalTAR_OSPACDRGCHI (RenameAttributesModule)
inputs
	custom = ATAR_OSPACDRGCHI
parameters
	inputAttributes = [ CostTAR_OSPACDRGCHI ]
	outputAttributes   = [ TAR_OSPACDRGCHI ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_OSPNAC 

FTAR_OSPNAC (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{TypeOfFullWard = "NAC"}; {REGIME="1"}]
	boolExpr = AND
end

ATAR_OSPNAC (AggregateModule)
inputs
	custom = FTAR_OSPNAC
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_OSPNAC: int };{ CostTAR_OSPNAC: float } ]
end

FinalTAR_OSPNAC (RenameAttributesModule)
inputs
	custom = ATAR_OSPNAC
parameters
	inputAttributes = [ CostTAR_OSPNAC ]
	outputAttributes   = [ TAR_OSPNAC ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_OSPDHDRGMED 

FTAR_OSPDHDRGMED (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{TypeOfDRG="MED"}  ; {REGIME="2"}]
	boolExpr = AND
end

ATAR_OSPDHDRGMED (AggregateModule)
inputs
	custom = FTAR_OSPDHDRGMED
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_OSPDHDRGMED: int };{ CostTAR_OSPDHDRGMED: float } ]
end

FinalTAR_OSPDHDRGMED (RenameAttributesModule)
inputs
	custom = ATAR_OSPDHDRGMED
parameters
	inputAttributes = [ CostTAR_OSPDHDRGMED ]
	outputAttributes   = [ TAR_OSPDHDRGMED ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_OSPDHDRGCHI 

FTAR_OSPDHDRGCHI (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{TypeOfDRG="CHI"} ; {REGIME="2"}]
	boolExpr = AND
end

ATAR_OSPDHDRGCHI (AggregateModule)
inputs
	custom = FTAR_OSPDHDRGCHI
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_OSPDHDRGCHI: int };{ CostTAR_OSPDHDRGCHI: float } ]
end

FinalTAR_OSPDHDRGCHI (RenameAttributesModule)
inputs
	custom = ATAR_OSPDHDRGCHI
parameters
	inputAttributes = [ CostTAR_OSPDHDRGCHI ]
	outputAttributes   = [ TAR_OSPDHDRGCHI ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_OSPDHPOSTACUTO 

FTAR_OSPDHPOSTACUTO (FilterModule)
inputs
	custom = sortedLastYearHOSP
parameters
	conditions = [{TypeOfFullWard = "NAC"} ; {REGIME="2"}]
	boolExpr = AND
end

ATAR_OSPDHPOSTACUTO (AggregateModule)
inputs
	custom = FTAR_OSPDHPOSTACUTO
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ COUNT(START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_OSPDHPOSTACUTO: int };{ CostTAR_OSPDHPOSTACUTO: float } ]
end

FinalTAR_OSPDHPOSTACUTO (RenameAttributesModule)
inputs
	custom = ATAR_OSPDHPOSTACUTO
parameters
	inputAttributes = [ CostTAR_OSPDHPOSTACUTO ]
	outputAttributes   = [ TAR_OSPDHPOSTACUTO ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_VISITE 

FTAR_VISITE (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{TypeOfProc = "CLIN"}]
	
end

ATAR_VISITE (AggregateModule)
inputs
	custom = FTAR_VISITE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT(PROC_START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_VISITE: int };{ CostTAR_VISITE: float } ]
end

FinalTAR_VISITE (RenameAttributesModule)
inputs
	custom = ATAR_VISITE
parameters
	inputAttributes = [ CostTAR_VISITE ]
	outputAttributes   = [ TAR_VISITE ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_DIA_STRUM 

FTAR_DIA_STRUM (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{TypeOfProc = "INSTR"}]
	
end

ATAR_DIA_STRUM (AggregateModule)
inputs
	custom = FTAR_DIA_STRUM
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT(PROC_START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_DIA_STRUM: int };{ CostTAR_DIA_STRUM: float } ]
end

FinalTAR_DIA_STRUM (RenameAttributesModule)
inputs
	custom = ATAR_DIA_STRUM
parameters
	inputAttributes = [ CostTAR_DIA_STRUM ]
	outputAttributes   = [ TAR_DIA_STRUM ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_DIA_IMM 

FTAR_DIA_IMM (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{TypeOfProc = "IMAG"}]
	
end

ATAR_DIA_IMM (AggregateModule)
inputs
	custom = FTAR_DIA_IMM
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT(PROC_START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_DIA_IMM: int };{ CostTAR_DIA_IMM: float } ]
end

FinalTAR_DIA_IMM (RenameAttributesModule)
inputs
	custom = ATAR_DIA_IMM
parameters
	inputAttributes = [ CostTAR_DIA_IMM ]
	outputAttributes   = [ TAR_DIA_IMM ]
end



// INDICATORS FOR GENERAL POPULATION: TAR_DIA_LAB 

FTAR_DIA_LAB (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{TypeOfProc = "LAB"}]
	
end

ATAR_DIA_LAB (AggregateModule)
inputs
	custom = FTAR_DIA_LAB
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT(PROC_START_DATE),SUM(VALUE) ]
	results =  [ { NumberTAR_DIA_LAB: int };{ CostTAR_DIA_LAB: float } ]
end

FinalTAR_DIA_LAB (RenameAttributesModule)
inputs
	custom = ATAR_DIA_LAB
parameters
	inputAttributes = [ CostTAR_DIA_LAB ]
	outputAttributes   = [ TAR_DIA_LAB ]
end



// INDICATORS FOR POPULATION WITH DISEASES: CREATININ

FCREATININ (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.16.3"};{PROC_COD  = "90.16.4"};{PROC_COD  = "90163"};{PROC_COD  = "90164"}]
	boolExpr = OR
end

ACREATININ (AggregateModule)
inputs
	custom = FCREATININ
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateCREATININ: date };{ MaxDateCREATININ: date };{ NumberCREATININ: int } ]
end

ClFinalCREATININ (ExtendDataModule)
inputs
	custom = ACREATININ
parameters
  attributes = [ {IsCREATININ : boolean } ]
end

FinalCREATININ (ApplyFunction)
inputs
	custom = ClFinalCREATININ
parameters
	function = GreaterThan(NumberCREATININ,0)
	result   = IsCREATININ
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: MICROALB

FMICROALB (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.33.4"} ; {PROC_COD  = "90334"} ]
	boolExpr = OR
end

AMICROALB (AggregateModule)
inputs
	custom = FMICROALB
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateMICROALB: date };{ MaxDateMICROALB: date };{ NumberMICROALB: int } ]
end

ClFinalMICROALB (ExtendDataModule)
inputs
	custom = AMICROALB
parameters
  attributes = [ {IsMICROALB : boolean } ]
end

FinalMICROALB (ApplyFunction)
inputs
	custom = ClFinalMICROALB
parameters
	function = GreaterThan(NumberMICROALB,0)
	result   = IsMICROALB
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: EMOGLIC

FEMOGLIC (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.28.1"} ; {PROC_COD  = "90281"}]
	boolExpr = OR
end

AEMOGLIC (AggregateModule)
inputs
	custom = FEMOGLIC
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateEMOGLIC: date };{ MaxDateEMOGLIC: date };{ NumberEMOGLIC: int } ]
end

ClFinalEMOGLIC (ExtendDataModule)
inputs
	custom = AEMOGLIC
parameters
  attributes = [ {IsEMOGLIC : boolean } ]
end

FinalEMOGLIC (ApplyFunction)
inputs
	custom = ClFinalEMOGLIC
parameters
	function = GreaterThan(NumberEMOGLIC,1)
	result   = IsEMOGLIC
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: STATINE

FSTATINE (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC matches "C10*"}]
	
end

ASTATINE (AggregateModule)
inputs
	custom = FSTATINE
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateSTATINE: date };{ MaxDateSTATINE: date };{ NumberSTATINE: int } ]
end

ClFinalSTATINE (ExtendDataModule)
inputs
	custom = ASTATINE
parameters
  attributes = [ {IsSTATINE : boolean } ]
end

FinalSTATINE (ApplyFunction)
inputs
	custom = ClFinalSTATINE
parameters
	function = NotEqual(MinDateSTATINE, MaxDateSTATINE)
	result   = IsSTATINE
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: ECG

FECG (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "89.52"} ; {PROC_COD  = "8952"}]
	boolExpr = OR
end

AECG (AggregateModule)
inputs
	custom = FECG
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateECG: date };{ MaxDateECG: date };{ NumberECG: int } ]
end

ClFinalECG (ExtendDataModule)
inputs
	custom = AECG
parameters
  attributes = [ {IsECG : boolean } ]
end

FinalECG (ApplyFunction)
inputs
	custom = ClFinalECG
parameters
	function = GreaterThan(NumberECG,0)
	result   = IsECG
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: GLICEM

FGLICEM (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.28.1"};{PROC_COD  = "90.27.1"}; {PROC_COD  = "90281"};{PROC_COD  = "90271"}]
	boolExpr = OR
end

AGLICEM (AggregateModule)
inputs
	custom = FGLICEM
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateGLICEM: date };{ MaxDateGLICEM: date };{ NumberGLICEM: int } ]
end

ClFinalGLICEM (ExtendDataModule)
inputs
	custom = AGLICEM
parameters
  attributes = [ {IsGLICEM : boolean } ]
end

FinalGLICEM (ApplyFunction)
inputs
	custom = ClFinalGLICEM
parameters
	function = GreaterThan(NumberGLICEM,0)
	result   = IsGLICEM
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: ANTIAGGREG

FANTIAGGREG (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC matches "B01A*"}]
	
end

AANTIAGGREG (AggregateModule)
inputs
	custom = FANTIAGGREG
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateANTIAGGREG: date };{ MaxDateANTIAGGREG: date };{ NumberANTIAGGREG: int } ]
end

ClFinalANTIAGGREG (ExtendDataModule)
inputs
	custom = AANTIAGGREG
parameters
  attributes = [ {IsANTIAGGREG : boolean } ]
end

FinalANTIAGGREG (ApplyFunction)
inputs
	custom = ClFinalANTIAGGREG
parameters
	function = NotEqual(MinDateANTIAGGREG, MaxDateANTIAGGREG)
	result   = IsANTIAGGREG
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: TERASPIRNAGG

FTERASPIRNAGG (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC = "B01AC06"}]
	
end

ATERASPIRNAGG (AggregateModule)
inputs
	custom = FTERASPIRNAGG
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateTERASPIRNAGG: date };{ MaxDateTERASPIRNAGG: date };{ NumberTERASPIRNAGG: int } ]
end

ClFinalTERASPIRNAGG (ExtendDataModule)
inputs
	custom = ATERASPIRNAGG
parameters
  attributes = [ {IsTERASPIRNAGG : boolean } ]
end

FinalTERASPIRNAGG (ApplyFunction)
inputs
	custom = ClFinalTERASPIRNAGG
parameters
	function = NotEqual(MinDateTERASPIRNAGG, MaxDateTERASPIRNAGG)
	result   = IsTERASPIRNAGG
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: BETABLOC

FBETABLOC (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC matches "C07*"}]
	
end

ABETABLOC (AggregateModule)
inputs
	custom = FBETABLOC
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateBETABLOC: date };{ MaxDateBETABLOC: date };{ NumberBETABLOC: int } ]
end

ClFinalBETABLOC (ExtendDataModule)
inputs
	custom = ABETABLOC
parameters
  attributes = [ {IsBETABLOC : boolean } ]
end

FinalBETABLOC (ApplyFunction)
inputs
	custom = ClFinalBETABLOC
parameters
	function = NotEqual(MinDateBETABLOC, MaxDateBETABLOC)
	result   = IsBETABLOC
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: ACEINIB

FACEINIB (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC matches "C09*"}]
	
end

AACEINIB (AggregateModule)
inputs
	custom = FACEINIB
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateACEINIB: date };{ MaxDateACEINIB: date };{ NumberACEINIB: int } ]
end

ClFinalACEINIB (ExtendDataModule)
inputs
	custom = AACEINIB
parameters
  attributes = [ {IsACEINIB : boolean } ]
end

FinalACEINIB (ApplyFunction)
inputs
	custom = ClFinalACEINIB
parameters
	function = NotEqual(MinDateACEINIB, MaxDateACEINIB)
	result   = IsACEINIB
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: NEUROLATIP

FNEUROLATIP (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC = "N05AH03"} ; {ATC = "N05AH04"} ; {ATC = "N05AX08"} ]
	boolExpr = OR
end

ANEUROLATIP (AggregateModule)
inputs
	custom = FNEUROLATIP
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateNEUROLATIP: date };{ MaxDateNEUROLATIP: date };{ NumberNEUROLATIP: int } ]
end

ClFinalNEUROLATIP (ExtendDataModule)
inputs
	custom = ANEUROLATIP
parameters
  attributes = [ {IsNEUROLATIP : boolean } ]
end

FinalNEUROLATIP (ApplyFunction)
inputs
	custom = ClFinalNEUROLATIP
parameters
	function = NotEqual(MinDateNEUROLATIP, MaxDateNEUROLATIP)
	result   = IsNEUROLATIP
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: NEUROLTIP

FNEUROLTIP (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC = "N05AD01"} ; {ATC = "N05AA03"}]
	boolExpr = OR
end

ANEUROLTIP (AggregateModule)
inputs
	custom = FNEUROLTIP
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateNEUROLTIP: date };{ MaxDateNEUROLTIP: date };{ NumberNEUROLTIP: int } ]
end

ClFinalNEUROLTIP (ExtendDataModule)
inputs
	custom = ANEUROLTIP
parameters
  attributes = [ {IsNEUROLTIP : boolean } ]
end

FinalNEUROLTIP (ApplyFunction)
inputs
	custom = ClFinalNEUROLTIP
parameters
	function = NotEqual(MinDateNEUROLTIP, MaxDateNEUROLTIP)
	result   = IsNEUROLTIP
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: TESTMEM

FTESTMEM (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "94.02.1"} ; {PROC_COD  = "94021"}]
	boolExpr = OR
end

ATESTMEM (AggregateModule)
inputs
	custom = FTESTMEM
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateTESTMEM: date };{ MaxDateTESTMEM: date };{ NumberTESTMEM: int } ]
end

ClFinalTESTMEM (ExtendDataModule)
inputs
	custom = ATESTMEM
parameters
  attributes = [ {IsTESTMEM : boolean } ]
end

FinalTESTMEM (ApplyFunction)
inputs
	custom = ClFinalTESTMEM
parameters
	function = GreaterThan(NumberTESTMEM,1)
	result   = IsTESTMEM
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: ERGOMETR

FERGOMETR (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "89.41"} ; {PROC_COD  = "8941"}]
	boolExpr = OR
end

AERGOMETR (AggregateModule)
inputs
	custom = FERGOMETR
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateERGOMETR: date };{ MaxDateERGOMETR: date };{ NumberERGOMETR: int } ]
end

ClFinalERGOMETR (ExtendDataModule)
inputs
	custom = AERGOMETR
parameters
  attributes = [ {IsERGOMETR : boolean } ]
end

FinalERGOMETR (ApplyFunction)
inputs
	custom = ClFinalERGOMETR
parameters
	function = GreaterThan(NumberERGOMETR,0)
	result   = IsERGOMETR
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: WALKTEST

FWALKTEST (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "89.44.2"} ; {PROC_COD  = "89442"}]
	boolExpr = OR
end

AWALKTEST (AggregateModule)
inputs
	custom = FWALKTEST
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateWALKTEST: date };{ MaxDateWALKTEST: date };{ NumberWALKTEST: int } ]
end

ClFinalWALKTEST (ExtendDataModule)
inputs
	custom = AWALKTEST
parameters
  attributes = [ {IsWALKTEST : boolean } ]
end

FinalWALKTEST (ApplyFunction)
inputs
	custom = ClFinalWALKTEST
parameters
	function = GreaterThan(NumberWALKTEST,0)
	result   = IsWALKTEST
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: BNP

FBNP (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.21.2"} ; {PROC_COD  = "90212"}]
	boolExpr = OR
end

ABNP (AggregateModule)
inputs
	custom = FBNP
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateBNP: date };{ MaxDateBNP: date };{ NumberBNP: int } ]
end

ClFinalBNP (ExtendDataModule)
inputs
	custom = ABNP
parameters
  attributes = [ {IsBNP : boolean } ]
end

FinalBNP (ApplyFunction)
inputs
	custom = ClFinalBNP
parameters
	function = GreaterThan(NumberBNP,0)
	result   = IsBNP
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: COLESTTOT

FCOLESTTOT (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.14.3"} ; {PROC_COD  = "90143"}]
	boolExpr = OR
end

ACOLESTTOT (AggregateModule)
inputs
	custom = FCOLESTTOT
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateCOLESTTOT: date };{ MaxDateCOLESTTOT: date };{ NumberCOLESTTOT: int } ]
end

ClFinalCOLESTTOT (ExtendDataModule)
inputs
	custom = ACOLESTTOT
parameters
  attributes = [ {IsCOLESTTOT : boolean } ]
end

FinalCOLESTTOT (ApplyFunction)
inputs
	custom = ClFinalCOLESTTOT
parameters
	function = GreaterThan(NumberCOLESTTOT,0)
	result   = IsCOLESTTOT
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: COLESTHDL

FCOLESTHDL (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.14.1"} ; {PROC_COD  = "90141"}]
	boolExpr = OR
end

ACOLESTHDL (AggregateModule)
inputs
	custom = FCOLESTHDL
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateCOLESTHDL: date };{ MaxDateCOLESTHDL: date };{ NumberCOLESTHDL: int } ]
end

ClFinalCOLESTHDL (ExtendDataModule)
inputs
	custom = ACOLESTHDL
parameters
  attributes = [ {IsCOLESTHDL : boolean } ]
end

FinalCOLESTHDL (ApplyFunction)
inputs
	custom = ClFinalCOLESTHDL
parameters
	function = GreaterThan(NumberCOLESTHDL,0)
	result   = IsCOLESTHDL
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: COLESTLDL

FCOLESTLDL (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.14.2"} ; {PROC_COD  = "90142"}]
	boolExpr = OR
end

ACOLESTLDL (AggregateModule)
inputs
	custom = FCOLESTLDL
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateCOLESTLDL: date };{ MaxDateCOLESTLDL: date };{ NumberCOLESTLDL: int } ]
end

ClFinalCOLESTLDL (ExtendDataModule)
inputs
	custom = ACOLESTLDL
parameters
  attributes = [ {IsCOLESTLDL : boolean } ]
end

FinalCOLESTLDL (ApplyFunction)
inputs
	custom = ClFinalCOLESTLDL
parameters
	function = GreaterThan(NumberCOLESTLDL,0)
	result   = IsCOLESTLDL
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: TRIGLIC

FTRIGLIC (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.43.2"} ; {PROC_COD  = "90432"}]
	boolExpr = OR
end

ATRIGLIC (AggregateModule)
inputs
	custom = FTRIGLIC
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateTRIGLIC: date };{ MaxDateTRIGLIC: date };{ NumberTRIGLIC: int } ]
end

ClFinalTRIGLIC (ExtendDataModule)
inputs
	custom = ATRIGLIC
parameters
  attributes = [ {IsTRIGLIC : boolean } ]
end

FinalTRIGLIC (ApplyFunction)
inputs
	custom = ClFinalTRIGLIC
parameters
	function = GreaterThan(NumberTRIGLIC,0)
	result   = IsTRIGLIC
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: SOD

FSOD (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.40.4"} ; {PROC_COD  = "90404"}]
	boolExpr = OR
end

ASOD (AggregateModule)
inputs
	custom = FSOD
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateSOD: date };{ MaxDateSOD: date };{ NumberSOD: int } ]
end

ClFinalSOD (ExtendDataModule)
inputs
	custom = ASOD
parameters
  attributes = [ {IsSOD : boolean } ]
end

FinalSOD (ApplyFunction)
inputs
	custom = ClFinalSOD
parameters
	function = GreaterThan(NumberSOD,0)
	result   = IsSOD
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: POTA

FPOTA (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.37.4"} ; {PROC_COD  = "90374"} ]
	boolExpr = OR
end

APOTA (AggregateModule)
inputs
	custom = FPOTA
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDatePOTA: date };{ MaxDatePOTA: date };{ NumberPOTA: int } ]
end

ClFinalPOTA (ExtendDataModule)
inputs
	custom = APOTA
parameters
  attributes = [ {IsPOTA : boolean } ]
end

FinalPOTA (ApplyFunction)
inputs
	custom = ClFinalPOTA
parameters
	function = GreaterThan(NumberPOTA,0)
	result   = IsPOTA
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: TRANSAM

FTRANSAM (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.09.2"} ; {PROC_COD  = "90.04.5"} ; {PROC_COD  = "90092"} ; {PROC_COD  = "90045"}]
	boolExpr = OR
end

ATRANSAM (AggregateModule)
inputs
	custom = FTRANSAM
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateTRANSAM: date };{ MaxDateTRANSAM: date };{ NumberTRANSAM: int } ]
end

ClFinalTRANSAM (ExtendDataModule)
inputs
	custom = ATRANSAM
parameters
  attributes = [ {IsTRANSAM : boolean } ]
end

FinalTRANSAM (ApplyFunction)
inputs
	custom = ClFinalTRANSAM
parameters
	function = GreaterThan(NumberTRANSAM,0)
	result   = IsTRANSAM
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: ELETTROL

FELETTROL (FilterModule)
inputs
	custom = sortedLastYearOUTPAT
parameters
	conditions = [{PROC_COD  = "90.13.4"} ; {PROC_COD  = "90.40.4"} ; {PROC_COD  = "90.37.4"} ; {PROC_COD  = "90134"} ; {PROC_COD  = "90404"} ; {PROC_COD  = "90374"}]
	boolExpr = OR
end

AELETTROL (AggregateModule)
inputs
	custom = FELETTROL
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE),MAX(PROC_START_DATE),COUNT(PROC_START_DATE) ]
	results =  [ { MinDateELETTROL: date };{ MaxDateELETTROL: date };{ NumberELETTROL: int } ]
end

ClFinalELETTROL (ExtendDataModule)
inputs
	custom = AELETTROL
parameters
  attributes = [ {IsELETTROL : boolean } ]
end

FinalELETTROL (ApplyFunction)
inputs
	custom = ClFinalELETTROL
parameters
	function = GreaterThan(NumberELETTROL,0)
	result   = IsELETTROL
	
	
end

// INDICATORS FOR POPULATION WITH DISEASES: DIUR

FDIUR (FilterModule)
inputs
	custom = sortedLastYearDRUGS
parameters
	conditions = [{ATC matches "C03*"}]
	
end

ADIUR (AggregateModule)
inputs
	custom = FDIUR
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DRUG_DISPENSING_DATE),MAX(DRUG_DISPENSING_DATE),COUNT(DRUG_DISPENSING_DATE) ]
	results =  [ { MinDateDIUR: date };{ MaxDateDIUR: date };{ NumberDIUR: int } ]
end

ClFinalDIUR (ExtendDataModule)
inputs
	custom = ADIUR
parameters
  attributes = [ {IsDIUR : boolean } ]
end

FinalDIUR (ApplyFunction)
inputs
	custom = ClFinalDIUR
parameters
	function = NotEqual(MinDateDIUR, MaxDateDIUR)
	result   = IsDIUR
	
	
end

// FINAL: join Cohort with sources for diaseases

sortedCohort_1 (MergeModule)
inputs
	custom = sortedCohort
	custom = FinalFirst_DIAB_HOSP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_2 (MergeModule)
inputs
	custom = sortedCohort_1
	custom = FinalFirst_DIAB_DRUGS
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_3 (MergeModule)
inputs
	custom = sortedCohort_2
	custom = FinalFirst_DIAB_EXE
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_4 (MergeModule)
inputs
	custom = sortedCohort_3
	custom = FinalFirst_IHD_HOSP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_5 (MergeModule)
inputs
	custom = sortedCohort_4
	custom = FinalFirst_IHD_DRUGS
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_6 (MergeModule)
inputs
	custom = sortedCohort_5
	custom = FinalFirst_IHD_EXE
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_7 (MergeModule)
inputs
	custom = sortedCohort_6
	custom = FinalFirst_HF_HOSP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_8 (MergeModule)
inputs
	custom = sortedCohort_7
	custom = FinalFirst_HF_EXE
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_9 (MergeModule)
inputs
	custom = sortedCohort_8
	custom = FinalFirst_HYPERTE_EXE
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_10 (MergeModule)
inputs
	custom = sortedCohort_9
	custom = FinalFirst_DEMEN_DRUGS
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_11 (MergeModule)
inputs
	custom = sortedCohort_10
	custom = FinalFirst_OLDAMI_HOSP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_12 (MergeModule)
inputs
	custom = sortedCohort_11
	custom = FinalCREATININ
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_13 (MergeModule)
inputs
	custom = sortedCohort_12
	custom = FinalMICROALB
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_14 (MergeModule)
inputs
	custom = sortedCohort_13
	custom = FinalEMOGLIC
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_15 (MergeModule)
inputs
	custom = sortedCohort_14
	custom = FinalSTATINE
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_16 (MergeModule)
inputs
	custom = sortedCohort_15
	custom = FinalECG
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_17 (MergeModule)
inputs
	custom = sortedCohort_16
	custom = FinalGLICEM
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_18 (MergeModule)
inputs
	custom = sortedCohort_17
	custom = FinalANTIAGGREG
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_19 (MergeModule)
inputs
	custom = sortedCohort_18
	custom = FinalTERASPIRNAGG
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_20 (MergeModule)
inputs
	custom = sortedCohort_19
	custom = FinalBETABLOC
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_21 (MergeModule)
inputs
	custom = sortedCohort_20
	custom = FinalACEINIB
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_22 (MergeModule)
inputs
	custom = sortedCohort_21
	custom = FinalNEUROLATIP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_23 (MergeModule)
inputs
	custom = sortedCohort_22
	custom = FinalNEUROLTIP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_24 (MergeModule)
inputs
	custom = sortedCohort_23
	custom = FinalTESTMEM
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_25 (MergeModule)
inputs
	custom = sortedCohort_24
	custom = FinalERGOMETR
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_26 (MergeModule)
inputs
	custom = sortedCohort_25
	custom = FinalWALKTEST
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_27 (MergeModule)
inputs
	custom = sortedCohort_26
	custom = FinalBNP
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_28 (MergeModule)
inputs
	custom = sortedCohort_27
	custom = FinalCOLESTTOT
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_29 (MergeModule)
inputs
	custom = sortedCohort_28
	custom = FinalCOLESTHDL
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_30 (MergeModule)
inputs
	custom = sortedCohort_29
	custom = FinalCOLESTLDL
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_31 (MergeModule)
inputs
	custom = sortedCohort_30
	custom = FinalTRIGLIC
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_32 (MergeModule)
inputs
	custom = sortedCohort_31
	custom = FinalSOD
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_33 (MergeModule)
inputs
	custom = sortedCohort_32
	custom = FinalPOTA
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_34 (MergeModule)
inputs
	custom = sortedCohort_33
	custom = FinalTRANSAM
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_35 (MergeModule)
inputs
	custom = sortedCohort_34
	custom = FinalELETTROL
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_36 (MergeModule)
inputs
	custom = sortedCohort_35
	custom = FinalDIUR
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_37 (MergeModule)
inputs
	custom = sortedCohort_36
	custom = FinalTARIFFA_LORDO_FARMACI
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_38 (MergeModule)
inputs
	custom = sortedCohort_37
	custom = FinalNUM_PRESC_FARM
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_39 (MergeModule)
inputs
	custom = sortedCohort_38
	custom = FinalNUM_RIC
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_40 (MergeModule)
inputs
	custom = sortedCohort_39
	custom = FinalTARIFFA_LORDO_RIC
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_41 (MergeModule)
inputs
	custom = sortedCohort_40
	custom = FinalTAR_OSPACDRGMED
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_42 (MergeModule)
inputs
	custom = sortedCohort_41
	custom = FinalTAR_OSPACDRGCHI
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_43 (MergeModule)
inputs
	custom = sortedCohort_42
	custom = FinalTAR_OSPNAC
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_44 (MergeModule)
inputs
	custom = sortedCohort_43
	custom = FinalTAR_OSPDHDRGMED
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_45 (MergeModule)
inputs
	custom = sortedCohort_44
	custom = FinalTAR_OSPDHDRGCHI
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_46 (MergeModule)
inputs
	custom = sortedCohort_45
	custom = FinalTAR_OSPDHPOSTACUTO
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end

sortedCohort_47 (MergeModule)
inputs
	custom = sortedCohort_46
	custom = FinalTAR_VISITE
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_48 (MergeModule)
inputs
	custom = sortedCohort_47
	custom = FinalTAR_DIA_STRUM
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

sortedCohort_49 (MergeModule)
inputs
	custom = sortedCohort_48
	custom = FinalTAR_DIA_IMM
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

FinalJoinPrev (MergeModule)
inputs
	custom = sortedCohort_49
	custom = FinalTAR_DIA_LAB
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

// FINAL: gen diseases date 

ClFinalDiseasesDate (ExtendDataModule)
inputs
	custom = FinalJoinPrev
parameters
  attributes = [  {DateDIAB: date }; {DateIHD: date }; {DateHF: date }; {DateHYPERTE: date }; {DateDEMEN: date }; {DateOLDAMI: date } ]
end

FinalDiseasesDate_1 (ApplyFunction)
inputs
	custom = ClFinalDiseasesDate
parameters
	function =  MIN( First_DIAB_HOSP, First_DIAB_DRUGS, First_DIAB_EXE ) 
	result   = DateDIAB
	
	
end

FinalDiseasesDate_2 (ApplyFunction)
inputs
	custom = FinalDiseasesDate_1
parameters
	function =  MIN( First_IHD_HOSP, First_IHD_DRUGS, First_IHD_EXE ) 
	result   = DateIHD
	
	
end

FinalDiseasesDate_3 (ApplyFunction)
inputs
	custom = FinalDiseasesDate_2
parameters
	function =  MIN( First_HF_HOSP, First_HF_EXE ) 
	result   = DateHF
	
	
end

FinalDiseasesDate_4 (ApplyFunction)
inputs
	custom = FinalDiseasesDate_3
parameters
	function =  MIN( First_HYPERTE_EXE ) 
	result   = DateHYPERTE
	
	
end

FinalDiseasesDate_5 (ApplyFunction)
inputs
	custom = FinalDiseasesDate_4
parameters
	function =  MIN( First_DEMEN_DRUGS ) 
	result   = DateDEMEN
	
	
end

FinalDiseasesDate (ApplyFunction)
inputs
	custom = FinalDiseasesDate_5
parameters
	function =  MIN( First_OLDAMI_HOSP ) 
	result   = DateOLDAMI
	
	
end

// FINAL: generate prevalent for diseases at 2012-01-01 

ClDiseasesPrev (ExtendDataModule)
inputs
	custom = FinalDiseasesDate
parameters
  attributes = [  { DIABPrev : string}; { IHDPrev : string}; { HFPrev : string}; { HYPERTEPrev : string}; { DEMENPrev : string}; { OLDAMIPrev : string} ]
end

DiseasesPrev_1 (ApplyFunction)
inputs
	custom = ClDiseasesPrev
parameters
	function = Id("1")
	result   = DIABPrev
	conditions = [ { DateDIAB < 2012-01-01 }; {IsPrev12M = true} ]
	boolExpr = AND
end

DiseasesPrev_2 (ApplyFunction)
inputs
	custom = DiseasesPrev_1
parameters
	function = Id("1")
	result   = IHDPrev
	conditions = [ { DateIHD < 2012-01-01 }; {IsPrev12M = true} ]
	boolExpr = AND
end

DiseasesPrev_3 (ApplyFunction)
inputs
	custom = DiseasesPrev_2
parameters
	function = Id("1")
	result   = HFPrev
	conditions = [ { DateHF < 2012-01-01 }; {IsPrev12M = true} ]
	boolExpr = AND
end

DiseasesPrev_4 (ApplyFunction)
inputs
	custom = DiseasesPrev_3
parameters
	function = Id("1")
	result   = HYPERTEPrev
	conditions = [ { DateHYPERTE < 2012-01-01 }; {IsPrev12M = true} ]
	boolExpr = AND
end

DiseasesPrev_5 (ApplyFunction)
inputs
	custom = DiseasesPrev_4
parameters
	function = Id("1")
	result   = DEMENPrev
	conditions = [ { DateDEMEN < 2012-01-01 }; {IsPrev12M = true} ]
	boolExpr = AND
end

DiseasesPrev (ApplyFunction)
inputs
	custom = DiseasesPrev_5
parameters
	function = Id("1")
	result   = OLDAMIPrev
	conditions = [ { DateOLDAMI < 2012-01-01 }; {IsPrev12M = true} ]
	boolExpr = AND
end

// FINAL: gen Sources for diseases at 2012-01-01

ClDiseasesPrevSources (ExtendDataModule)
inputs
	custom = DiseasesPrev
parameters
  attributes = [  {FONTI_DIAB: string } ;{FONTI_IHD: string } ;{FONTI_HF: string } ;{FONTI_HYPERTE: string } ;{FONTI_DEMEN: string } ]
end

// FINAL: fill in Sources for diseases at 2012-01-01 

DiseasesPrevSource_1 (ApplyFunction)
inputs
	custom = ClDiseasesPrevSources
parameters
	function = Concat(FONTI_DIAB,"HOSP ")
	result   = FONTI_DIAB
	conditions = [ {First_DIAB_HOSP < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_2 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_1
parameters
	function = Concat(FONTI_DIAB,"DRUGS ")
	result   = FONTI_DIAB
	conditions = [ {First_DIAB_DRUGS < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_3 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_2
parameters
	function = Concat(FONTI_DIAB,"EXE ")
	result   = FONTI_DIAB
	conditions = [ {First_DIAB_EXE < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_4 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_3
parameters
	function = Concat(FONTI_IHD,"HOSP ")
	result   = FONTI_IHD
	conditions = [ {First_IHD_HOSP < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_5 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_4
parameters
	function = Concat(FONTI_IHD,"DRUGS ")
	result   = FONTI_IHD
	conditions = [ {First_IHD_DRUGS < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_6 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_5
parameters
	function = Concat(FONTI_IHD,"EXE ")
	result   = FONTI_IHD
	conditions = [ {First_IHD_EXE < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_7 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_6
parameters
	function = Concat(FONTI_HF,"HOSP ")
	result   = FONTI_HF
	conditions = [ {First_HF_HOSP < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_8 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_7
parameters
	function = Concat(FONTI_HF,"EXE ")
	result   = FONTI_HF
	conditions = [ {First_HF_EXE < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource_9 (ApplyFunction)
inputs
	custom = DiseasesPrevSource_8
parameters
	function = Concat(FONTI_HYPERTE,"EXE ")
	result   = FONTI_HYPERTE
	conditions = [ {First_HYPERTE_EXE < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

DiseasesPrevSource (ApplyFunction)
inputs
	custom = DiseasesPrevSource_9
parameters
	function = Concat(FONTI_DEMEN,"DRUGS ")
	result   = FONTI_DEMEN
	conditions = [ {First_DEMEN_DRUGS < 2012-01-01}; {IsPrev12M= true}]
	boolExpr = AND
end

// FINAL: generate prevalent for diseases at 2012-12-31 

ClDiseasesPrevFinal (ExtendDataModule)
inputs
	custom = DiseasesPrevSource
parameters
  attributes = [  { DIABPrevENDFUP : string }; { IHDPrevENDFUP : string }; { HFPrevENDFUP : string }; { HYPERTEPrevENDFUP : string }; { DEMENPrevENDFUP : string }; { OLDAMIPrevENDFUP : string } ]
end

DiseasesPrevFinal_1 (ApplyFunction)
inputs
	custom = ClDiseasesPrevFinal
parameters
	function = Id("1")
	result   = DIABPrevENDFUP
	conditions = [ { DateDIAB < 2012-12-31 }; {IsPrevDATEENDFUP= true} ]
	boolExpr = AND
end

DiseasesPrevFinal_2 (ApplyFunction)
inputs
	custom = DiseasesPrevFinal_1
parameters
	function = Id("1")
	result   = IHDPrevENDFUP
	conditions = [ { DateIHD < 2012-12-31 }; {IsPrevDATEENDFUP= true} ]
	boolExpr = AND
end

DiseasesPrevFinal_3 (ApplyFunction)
inputs
	custom = DiseasesPrevFinal_2
parameters
	function = Id("1")
	result   = HFPrevENDFUP
	conditions = [ { DateHF < 2012-12-31 }; {IsPrevDATEENDFUP= true} ]
	boolExpr = AND
end

DiseasesPrevFinal_4 (ApplyFunction)
inputs
	custom = DiseasesPrevFinal_3
parameters
	function = Id("1")
	result   = HYPERTEPrevENDFUP
	conditions = [ { DateHYPERTE < 2012-12-31 }; {IsPrevDATEENDFUP= true} ]
	boolExpr = AND
end

DiseasesPrevFinal_5 (ApplyFunction)
inputs
	custom = DiseasesPrevFinal_4
parameters
	function = Id("1")
	result   = DEMENPrevENDFUP
	conditions = [ { DateDEMEN < 2012-12-31 }; {IsPrevDATEENDFUP= true} ]
	boolExpr = AND
end

DiseasesPrevFinal (ApplyFunction)
inputs
	custom = DiseasesPrevFinal_5
parameters
	function = Id("1")
	result   = OLDAMIPrevENDFUP
	conditions = [ { DateOLDAMI < 2012-12-31 }; {IsPrevDATEENDFUP= true} ]
	boolExpr = AND
end

// FINAL: gen STAGE of diseases at 2012-01-01

ClDiseasesStages (ExtendDataModule)
inputs
	custom = DiseasesPrevFinal
parameters
  attributes = [  {STAGE_DIAB: string } ;{STAGE_IHD: string } ;{STAGE_HF: string } ;{STAGE_HYPERTE: string } ;{STAGE_DEMEN: string } ]
end

// FINAL: fill in STAGE of diseases at 2012-01-01 

DiseasesStage_1 (ApplyFunction)
inputs
	custom = ClDiseasesStages
parameters
	function = Id("DIAB1a")
	result   = STAGE_DIAB
	conditions = [{DIABPrev = "1"}]
	
end

DiseasesStage_2 (ApplyFunction)
inputs
	custom = DiseasesStage_1
parameters
	function = Id("DIAB1b")
	result   = STAGE_DIAB
	conditions = [{DIABPrev = "1"};{First_DIAB_DRUGS < 2012-01-01}]
	boolExpr = AND 
end

DiseasesStage_3 (ApplyFunction)
inputs
	custom = DiseasesStage_2
parameters
	function = Id("IHD1a")
	result   = STAGE_IHD
	conditions = [{IHDPrev = "1"}]
	
end

DiseasesStage_4 (ApplyFunction)
inputs
	custom = DiseasesStage_3
parameters
	function = Id("IHD1b")
	result   = STAGE_IHD
	conditions = [{IHDPrev = "1"};{ OLDAMIPrev = "1"}]
	boolExpr = AND 
end

DiseasesStage_5 (ApplyFunction)
inputs
	custom = DiseasesStage_4
parameters
	function = Id("IHD3")
	result   = STAGE_IHD
	conditions = [{IHDPrev = "1"};{ HFPrev = "1"}]
	boolExpr = AND 
end

DiseasesStage_6 (ApplyFunction)
inputs
	custom = DiseasesStage_5
parameters
	function = Id("HF1")
	result   = STAGE_HF
	conditions = [{HFPrev = "1"}]
	
end

DiseasesStage_7 (ApplyFunction)
inputs
	custom = DiseasesStage_6
parameters
	function = Id("HYPERTE1")
	result   = STAGE_HYPERTE
	conditions = [{HYPERTEPrev = "1"}]
	
end

DiseasesStage_8 (ApplyFunction)
inputs
	custom = DiseasesStage_7
parameters
	function = Id("HYPERTE2b")
	result   = STAGE_HYPERTE
	conditions = [{HYPERTEPrev = "1"};{ HFPrev = "1"}]
	boolExpr = AND 
end

DiseasesStage (ApplyFunction)
inputs
	custom = DiseasesStage_8
parameters
	function = Id("ANTICOLIN")
	result   = STAGE_DEMEN
	conditions = [{DEMENPrev = "1"}]
	
end

// FINAL: rename variables

RenamedFile (RenameAttributesModule)
inputs
	custom = DiseasesStage
parameters
	inputAttributes = [ PERSON_ID,DATE_OF_BIRTH, DATE_OF_DEATH,GENDER_CONCEPT_ID,STARTDATE, ENDDATE, GP_ID, IsPrev12M,IsPrevDATEENDFUP,DateDIAB,STAGE_DIAB,DIABPrevENDFUP,DateIHD,STAGE_IHD,IHDPrevENDFUP,DateHF,STAGE_HF,HFPrevENDFUP,DateHYPERTE,STAGE_HYPERTE,HYPERTEPrevENDFUP,DateDEMEN,STAGE_DEMEN,DEMENPrevENDFUP,TAR_OSPACDRGMED,TAR_OSPACDRGCHI,TAR_OSPNAC,TAR_OSPDHDRGMED,TAR_OSPDHDRGCHI,TAR_OSPDHPOSTACUTO,TAR_VISITE,TAR_DIA_STRUM,TAR_DIA_IMM,TAR_DIA_LAB ]
	outputAttributes   = [ ID_SOGGETTO,DATA_NASCITA,DATA_MORTE,SESSO,DATA_INGRESSO, DATA_USCITA,MMG,IN_CARICO12M,IN_CARICO,DATA_DIAGN_DIAB,STADIO_DIAB_12M,STADIO_DIAB,DATA_DIAGN_IHD,STADIO_IHD_12M,STADIO_IHD,DATA_DIAGN_HF,STADIO_HF_12M,STADIO_HF,DATA_DIAGN_HYPERTE,STADIO_HYPERTE_12M,STADIO_HYPERTE,DATA_DIAGN_DEMEN,STADIO_DEMEN_12M,STADIO_DEMEN,TARIFFA_LORDO_OSPACDRGMED,TARIFFA_LORDO_OSPACDRGCHIR,TARIFFA_LORDO_OSPNAC,TARIFFA_LORDO_OSPDHDRGMED,TARIFFA_LORDO_OSPDHDRGCHIR,TARIFFA_LORDO_OSPDHPOSTACUTO,TARIFFA_LORDO_VISITE,TARIFFA_LORDO_DIA_STRUM,TARIFFA_LORDO_DIA_IMM,TARIFFA_LORDO_DIA_LAB ]
end



// FINAL: gen auxiliary variables for some disease-specific complex indicators

ClVarComplex (ExtendDataModule)
inputs
	custom = RenamedFile
parameters
  attributes = [   { IsTWOSOD : boolean = false }  ; { IsTWOPOTA : boolean = false }  ]
end

VarComplex_1 (ApplyFunction)
inputs
	custom = ClVarComplex
parameters
	function = GreaterThan(NumberSOD,1)
	result   = IsTWOSOD
	
	
end

VarComplex (ApplyFunction)
inputs
	custom = VarComplex_1
parameters
	function = GreaterThan(NumberPOTA,1)
	result   = IsTWOPOTA
	
	
end

// FINAL: gen complex disease-specific indicators

ClIndicComplex (ExtendDataModule)
inputs
	custom = VarComplex
parameters
  attributes = [   { IsPROFLIP : boolean = false}  ; { IsNAKDIUR : boolean = false}  ; { IsCREATNAK : boolean = false}  ; { IsEMATOCHIM : boolean = false}  ; { IsNEUROLATIVSTI : boolean = false}  ]
end

IndicComplex_1 (ApplyFunction)
inputs
	custom = ClIndicComplex
parameters
	function = Id(true)
	result   = IsPROFLIP
	conditions = [ {IsCOLESTTOT = true};{IsCOLESTHDL = true};{IsTRIGLIC = true}]
	boolExpr = AND
end

IndicComplex_2 (ApplyFunction)
inputs
	custom = IndicComplex_1
parameters
	function = Id(true)
	result   = IsNAKDIUR
	conditions = [ {IsTWOSOD = true};{IsTWOPOTA = true}]
	boolExpr = AND
end

IndicComplex_3 (ApplyFunction)
inputs
	custom = IndicComplex_2
parameters
	function = Id(true)
	result   = IsCREATNAK
	conditions = [ {IsSOD = true};{IsPOTA = true};{IsCREATININ = true}]
	boolExpr = AND
end

IndicComplex_4 (ApplyFunction)
inputs
	custom = IndicComplex_3
parameters
	function = Id(true)
	result   = IsEMATOCHIM
	conditions = [ {IsTRANSAM = true};{IsELETTROL = true};{IsGLICEM = true};{IsCREATININ = true}]
	boolExpr = AND
end

IndicComplex (ApplyFunction)
inputs
	custom = IndicComplex_4
parameters
	function = Id(true)
	result   = IsNEUROLATIVSTI
	conditions = [ {IsNEUROLATIP = true}]
	
end

// FINAL: gen num/denom of disease-specific indicators (DEN is specific per stage)

ClIndicFinalnoDenomSpec (ExtendDataModule)
inputs
	custom = IndicComplex
parameters
  attributes = [   { DEN_CREATININ_DIAB : int } ; { NUM_CREATININ_DIAB : int = 0 }  ; { DEN_CREATININ_HYPERTE : int } ; { NUM_CREATININ_HYPERTE : int = 0 }  ; { DEN_MICROALB_DIAB : int } ; { NUM_MICROALB_DIAB : int = 0 }  ; { DEN_MICROALB_HYPERTE : int } ; { NUM_MICROALB_HYPERTE : int = 0 }  ; { DEN_EMOGLIC_DIAB : int } ; { NUM_EMOGLIC_DIAB : int = 0 }  ; { DEN_STATINE_DIAB : int } ; { NUM_STATINE_DIAB : int = 0 }  ; { DEN_STATINE_IHD : int } ; { NUM_STATINE_IHD : int = 0 }  ; { DEN_ECG_IHD : int } ; { NUM_ECG_IHD : int = 0 }  ; { DEN_ECG_HYPERTE : int } ; { NUM_ECG_HYPERTE : int = 0 }  ; { DEN_ECG_HF : int } ; { NUM_ECG_HF : int = 0 }  ; { DEN_ECG_DEMEN : int } ; { NUM_ECG_DEMEN : int = 0 }  ; { DEN_GLICEM_IHD : int } ; { NUM_GLICEM_IHD : int = 0 }  ; { DEN_GLICEM_HYPERTE : int } ; { NUM_GLICEM_HYPERTE : int = 0 }  ; { DEN_ANTIAGGREG_IHD : int } ; { NUM_ANTIAGGREG_IHD : int = 0 }  ; { DEN_TERASPIRNAGG_DIAB : int } ; { NUM_TERASPIRNAGG_DIAB : int = 0 }  ; { DEN_BETABLOC_IHD : int } ; { NUM_BETABLOC_IHD : int = 0 }  ; { DEN_BETABLOC_HF : int } ; { NUM_BETABLOC_HF : int = 0 }  ; { DEN_ACEINIB_IHD : int } ; { NUM_ACEINIB_IHD : int = 0 }  ; { DEN_ACEINIB_HF : int } ; { NUM_ACEINIB_HF : int = 0 }  ; { DEN_NEUROLATIP_DEMEN : int } ; { NUM_NEUROLATIP_DEMEN : int = 0 }  ; { DEN_NEUROLTIP_DEMEN : int } ; { NUM_NEUROLTIP_DEMEN : int = 0 }  ; { DEN_TESTMEM_DEMEN : int } ; { NUM_TESTMEM_DEMEN : int = 0 }  ; { DEN_ERGOMETR_IHD : int } ; { NUM_ERGOMETR_IHD : int = 0 }  ; { DEN_WALKTEST_HF : int } ; { NUM_WALKTEST_HF : int = 0 }  ; { DEN_BNP_HF : int } ; { NUM_BNP_HF : int = 0 }  ; { DEN_PROFLIP_DIAB : int } ; { NUM_PROFLIP_DIAB : int = 0 }  ; { DEN_PROFLIP_IHD : int } ; { NUM_PROFLIP_IHD : int = 0 }  ; { DEN_PROFLIP_HYPERTE : int } ; { NUM_PROFLIP_HYPERTE : int = 0 }  ; { DEN_NAKDIUR_HF : int } ; { NUM_NAKDIUR_HF : int = 0 }  ; { DEN_CREATNAK_HF : int } ; { NUM_CREATNAK_HF : int = 0 }  ; { DEN_EMATOCHIM_DEMEN : int } ; { NUM_EMATOCHIM_DEMEN : int = 0 }  ; { DEN_NEUROLATIVSTI_DEMEN : int } ; { NUM_NEUROLATIVSTI_DEMEN : int = 0 }  ]
end

IndicFinalnoDenomSpec_1 (ApplyFunction)
inputs
	custom = ClIndicFinalnoDenomSpec
parameters
	function = Id(1)
	result   = DEN_CREATININ_DIAB
	conditions = [ { STADIO_DIAB_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_2 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_1
parameters
	function = Id(1)
	result   = NUM_CREATININ_DIAB
	conditions = [ { DEN_CREATININ_DIAB = 1 } ; { IsCREATININ = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_3 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_2
parameters
	function = Id(1)
	result   = DEN_CREATININ_HYPERTE
	conditions = [ { STADIO_HYPERTE_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_4 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_3
parameters
	function = Id(1)
	result   = NUM_CREATININ_HYPERTE
	conditions = [ { DEN_CREATININ_HYPERTE = 1 } ; { IsCREATININ = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_5 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_4
parameters
	function = Id(1)
	result   = DEN_MICROALB_DIAB
	conditions = [ { STADIO_DIAB_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_6 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_5
parameters
	function = Id(1)
	result   = NUM_MICROALB_DIAB
	conditions = [ { DEN_MICROALB_DIAB = 1 } ; { IsMICROALB = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_7 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_6
parameters
	function = Id(1)
	result   = DEN_MICROALB_HYPERTE
	conditions = [ { STADIO_HYPERTE_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_8 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_7
parameters
	function = Id(1)
	result   = NUM_MICROALB_HYPERTE
	conditions = [ { DEN_MICROALB_HYPERTE = 1 } ; { IsMICROALB = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_9 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_8
parameters
	function = Id(1)
	result   = DEN_EMOGLIC_DIAB
	conditions = [ { STADIO_DIAB_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_10 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_9
parameters
	function = Id(1)
	result   = NUM_EMOGLIC_DIAB
	conditions = [ { DEN_EMOGLIC_DIAB = 1 } ; { IsEMOGLIC = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_11 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_10
parameters
	function = Id(1)
	result   = DEN_STATINE_DIAB
	conditions = [ { STADIO_DIAB_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_12 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_11
parameters
	function = Id(1)
	result   = NUM_STATINE_DIAB
	conditions = [ { DEN_STATINE_DIAB = 1 } ; { IsSTATINE = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_13 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_12
parameters
	function = Id(1)
	result   = DEN_STATINE_IHD
	conditions = [  {STADIO_IHD_12M = "IHD2a"} ; {STADIO_IHD_12M = "IHD2b"} ; {STADIO_IHD_12M = "IHD3"}  ]
	boolExpr = OR
end

IndicFinalnoDenomSpec_14 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_13
parameters
	function = Id(1)
	result   = NUM_STATINE_IHD
	conditions = [ { DEN_STATINE_IHD = 1 } ; { IsSTATINE = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_15 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_14
parameters
	function = Id(1)
	result   = DEN_ECG_IHD
	conditions = [ { STADIO_IHD_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_16 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_15
parameters
	function = Id(1)
	result   = NUM_ECG_IHD
	conditions = [ { DEN_ECG_IHD = 1 } ; { IsECG = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_17 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_16
parameters
	function = Id(1)
	result   = DEN_ECG_HYPERTE
	conditions = [ { STADIO_HYPERTE_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_18 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_17
parameters
	function = Id(1)
	result   = NUM_ECG_HYPERTE
	conditions = [ { DEN_ECG_HYPERTE = 1 } ; { IsECG = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_19 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_18
parameters
	function = Id(1)
	result   = DEN_ECG_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_20 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_19
parameters
	function = Id(1)
	result   = NUM_ECG_HF
	conditions = [ { DEN_ECG_HF = 1 } ; { IsECG = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_21 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_20
parameters
	function = Id(1)
	result   = DEN_ECG_DEMEN
	conditions = [ { STADIO_DEMEN_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_22 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_21
parameters
	function = Id(1)
	result   = NUM_ECG_DEMEN
	conditions = [ { DEN_ECG_DEMEN = 1 } ; { IsECG = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_23 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_22
parameters
	function = Id(1)
	result   = DEN_GLICEM_IHD
	conditions = [ { STADIO_IHD_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_24 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_23
parameters
	function = Id(1)
	result   = NUM_GLICEM_IHD
	conditions = [ { DEN_GLICEM_IHD = 1 } ; { IsGLICEM = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_25 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_24
parameters
	function = Id(1)
	result   = DEN_GLICEM_HYPERTE
	conditions = [ { STADIO_HYPERTE_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_26 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_25
parameters
	function = Id(1)
	result   = NUM_GLICEM_HYPERTE
	conditions = [ { DEN_GLICEM_HYPERTE = 1 } ; { IsGLICEM = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_27 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_26
parameters
	function = Id(1)
	result   = DEN_ANTIAGGREG_IHD
	conditions = [  {STADIO_IHD_12M = "IHD2a"} ; {STADIO_IHD_12M = "IHD2b"} ; {STADIO_IHD_12M = "IHD3"}  ]
	boolExpr = OR
end

IndicFinalnoDenomSpec_28 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_27
parameters
	function = Id(1)
	result   = NUM_ANTIAGGREG_IHD
	conditions = [ { DEN_ANTIAGGREG_IHD = 1 } ; { IsANTIAGGREG = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_29 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_28
parameters
	function = Id(1)
	result   = DEN_TERASPIRNAGG_DIAB
	conditions = [  {STADIO_DIAB_12M = "DIAB2a"} ; {STADIO_DIAB_12M = "DIAB2b"}  ]
	boolExpr = OR
end

IndicFinalnoDenomSpec_30 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_29
parameters
	function = Id(1)
	result   = NUM_TERASPIRNAGG_DIAB
	conditions = [ { DEN_TERASPIRNAGG_DIAB = 1 } ; { IsTERASPIRNAGG = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_31 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_30
parameters
	function = Id(1)
	result   = DEN_BETABLOC_IHD
	conditions = [  {STADIO_IHD_12M = "IHD2a"} ; {STADIO_IHD_12M = "IHD2b"} ; {STADIO_IHD_12M = "IHD3"}  ]
	boolExpr = OR
end

IndicFinalnoDenomSpec_32 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_31
parameters
	function = Id(1)
	result   = NUM_BETABLOC_IHD
	conditions = [ { DEN_BETABLOC_IHD = 1 } ; { IsBETABLOC = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_33 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_32
parameters
	function = Id(1)
	result   = DEN_BETABLOC_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_34 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_33
parameters
	function = Id(1)
	result   = NUM_BETABLOC_HF
	conditions = [ { DEN_BETABLOC_HF = 1 } ; { IsBETABLOC = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_35 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_34
parameters
	function = Id(1)
	result   = DEN_ACEINIB_IHD
	conditions = [ { STADIO_IHD_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_36 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_35
parameters
	function = Id(1)
	result   = NUM_ACEINIB_IHD
	conditions = [ { DEN_ACEINIB_IHD = 1 } ; { IsACEINIB = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_37 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_36
parameters
	function = Id(1)
	result   = DEN_ACEINIB_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_38 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_37
parameters
	function = Id(1)
	result   = NUM_ACEINIB_HF
	conditions = [ { DEN_ACEINIB_HF = 1 } ; { IsACEINIB = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_39 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_38
parameters
	function = Id(1)
	result   = DEN_NEUROLATIP_DEMEN
	conditions = [ { STADIO_DEMEN_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_40 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_39
parameters
	function = Id(1)
	result   = NUM_NEUROLATIP_DEMEN
	conditions = [ { DEN_NEUROLATIP_DEMEN = 1 } ; { IsNEUROLATIP = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_41 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_40
parameters
	function = Id(1)
	result   = DEN_NEUROLTIP_DEMEN
	conditions = [ { STADIO_DEMEN_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_42 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_41
parameters
	function = Id(1)
	result   = NUM_NEUROLTIP_DEMEN
	conditions = [ { DEN_NEUROLTIP_DEMEN = 1 } ; { IsNEUROLTIP = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_43 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_42
parameters
	function = Id(1)
	result   = DEN_TESTMEM_DEMEN
	conditions = [ { STADIO_DEMEN_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_44 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_43
parameters
	function = Id(1)
	result   = NUM_TESTMEM_DEMEN
	conditions = [ { DEN_TESTMEM_DEMEN = 1 } ; { IsTESTMEM = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_45 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_44
parameters
	function = Id(1)
	result   = DEN_ERGOMETR_IHD
	conditions = [ { STADIO_IHD_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_46 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_45
parameters
	function = Id(1)
	result   = NUM_ERGOMETR_IHD
	conditions = [ { DEN_ERGOMETR_IHD = 1 } ; { IsERGOMETR = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_47 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_46
parameters
	function = Id(1)
	result   = DEN_WALKTEST_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_48 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_47
parameters
	function = Id(1)
	result   = NUM_WALKTEST_HF
	conditions = [ { DEN_WALKTEST_HF = 1 } ; { IsWALKTEST = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_49 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_48
parameters
	function = Id(1)
	result   = DEN_BNP_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_50 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_49
parameters
	function = Id(1)
	result   = NUM_BNP_HF
	conditions = [ { DEN_BNP_HF = 1 } ; { IsBNP = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_51 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_50
parameters
	function = Id(1)
	result   = DEN_PROFLIP_DIAB
	conditions = [ { STADIO_DIAB_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_52 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_51
parameters
	function = Id(1)
	result   = NUM_PROFLIP_DIAB
	conditions = [ { DEN_PROFLIP_DIAB = 1 } ; { IsPROFLIP = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_53 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_52
parameters
	function = Id(1)
	result   = DEN_PROFLIP_IHD
	conditions = [ { STADIO_IHD_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_54 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_53
parameters
	function = Id(1)
	result   = NUM_PROFLIP_IHD
	conditions = [ { DEN_PROFLIP_IHD = 1 } ; { IsPROFLIP = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_55 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_54
parameters
	function = Id(1)
	result   = DEN_PROFLIP_HYPERTE
	conditions = [ { STADIO_HYPERTE_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_56 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_55
parameters
	function = Id(1)
	result   = NUM_PROFLIP_HYPERTE
	conditions = [ { DEN_PROFLIP_HYPERTE = 1 } ; { IsPROFLIP = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_57 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_56
parameters
	function = Id(1)
	result   = DEN_NAKDIUR_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_58 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_57
parameters
	function = Id(1)
	result   = NUM_NAKDIUR_HF
	conditions = [ { DEN_NAKDIUR_HF = 1 } ; { IsNAKDIUR = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_59 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_58
parameters
	function = Id(1)
	result   = DEN_CREATNAK_HF
	conditions = [ { STADIO_HF_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_60 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_59
parameters
	function = Id(1)
	result   = NUM_CREATNAK_HF
	conditions = [ { DEN_CREATNAK_HF = 1 } ; { IsCREATNAK = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_61 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_60
parameters
	function = Id(1)
	result   = DEN_EMATOCHIM_DEMEN
	conditions = [ { STADIO_DEMEN_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec_62 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_61
parameters
	function = Id(1)
	result   = NUM_EMATOCHIM_DEMEN
	conditions = [ { DEN_EMATOCHIM_DEMEN = 1 } ; { IsEMATOCHIM = true }]
	boolExpr = AND
end

IndicFinalnoDenomSpec_63 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_62
parameters
	function = Id(1)
	result   = DEN_NEUROLATIVSTI_DEMEN
	conditions = [ { STADIO_DEMEN_12M != MISSING } ]
	
end

IndicFinalnoDenomSpec (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec_63
parameters
	function = Id(1)
	result   = NUM_NEUROLATIVSTI_DEMEN
	conditions = [ { DEN_NEUROLATIVSTI_DEMEN = 1 } ; { IsNEUROLATIVSTI = true }]
	boolExpr = AND
end

// FINAL: set to 0 denominators of some disease-specific indicators with special requirements on denominators (indicspecialdenom)

IndicFinal_1 (ApplyFunction)
inputs
	custom = IndicFinalnoDenomSpec
parameters
	function = Id(0)
	result   = DEN_NAKDIUR_HF
	conditions = [ {IsDIUR = false}]
	
end

IndicFinal_2 (ApplyFunction)
inputs
	custom = IndicFinal_1
parameters
	function = Id(0)
	result   = DEN_TERASPIRNAGG_DIAB
	conditions = [ {IsANTIAGGREG = true};{IsTERASPIRNAGG = false}]
	boolExpr = AND
end

IndicFinal (ApplyFunction)
inputs
	custom = IndicFinal_2
parameters
	function = Id(0)
	result   = DEN_NEUROLATIVSTI_DEMEN
	conditions = [ {IsNEUROLATIP = false};{IsNEUROLTIP = false}]
	boolExpr = AND
end

// FINAL: rename final variables

FinalRenamedFile (RenameAttributesModule)
inputs
	custom = IndicFinal
parameters
	inputAttributes = [ First_DEMEN_DRUGS, STADIO_DEMEN_12M ]
	outputAttributes   = [ DATA_PRIMA_PRESCR_ANTICOLIN, ANTICOLIN_12M ]
end



// FINAL: gen empty variables (temporary)

FullVariables (ExtendDataModule)
inputs
	custom = FinalRenamedFile
parameters
  attributes = [ {CITTADINANZA: string} ]
end

// FINAL: gen constant variables (dates)

WithConstantDates (ExtendDataModule)
inputs
	custom = FullVariables
parameters
  attributes = [ {DATA: date = 2012-12-31};{DATA_AGG: date =2012-12-31} ]
end

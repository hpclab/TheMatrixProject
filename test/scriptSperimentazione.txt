
// load HOSP
HOSP (ScriptInputModule)
parameters
	scriptFilename = LoadHOSP.txt
	inputName = HOSP
	expectedSchema = IADhosp
end

// load EXE
EXE (ScriptInputModule)
parameters
	scriptFilename = LoadEXE.txt
	inputName = EXE
	expectedSchema = IADexe
end

// load DRUGS
DRUGS (ScriptInputModule)
parameters
	scriptFilename = LoadDRUGS.txt
	inputName = DRUGS
	expectedSchema = IADdrugs
end

// load PERSON
PERSON (ScriptInputModule)
parameters
	scriptFilename = LoadPERSON.txt
	inputName = PERSON
	expectedSchema = IADperson
end

// load OUTPAT
OUTPAT (ScriptInputModule)
parameters
	scriptFilename = LoadOUTPAT.txt
	inputName = OUTPAT
	expectedSchema = IADoutpat
end

// PREVALENT: select prevalent at date 2011-01-01
FPrev20110101 (FilterModule)
inputs
	IADperson = PERSON
parameters
	conditions = [ {ENDDATE > 2011-01-01};{STARTDATE <= 2011-01-01} ]
	boolExpr = AND
end

ClFinalPrev20110101 (ExtendDataModule)
inputs
	 IADPerson= FPrev20110101
parameters
  attributes = [ {IsPrev20110101 : boolean } ]
end

FinalPrev20110101 (ApplyFunction)
inputs
	custom = ClFinalPrev20110101
parameters
	function = Id (true)
	result   =  IsPrev20110101 
	conditions = [{ENDDATE > 2011-01-01};{STARTDATE <= 2011-01-01}]
end

// DIABETES: select first discharge 
FFirstDiabetesDischarge (FilterModule)
inputs
	IADhosp = HOSP
parameters
	conditions = [{MAIN_DIAGNOSIS  matches "250*"}]
	boolExpr = AND
end
FinalFirstDiabetesDischarge (AggregateModule)
inputs
	IADhosp = FFirstDiabetesDischarge
parameters
	isInputSorted = false
	groupBy =  [ PATIENT_ID ]
	functions = [ MIN(START_DATE) ]
	results =  [ { FirstDiabetesDischarge: date } ]
end

// DIABETES: select first exemption 
FFirstDiabetesExe (FilterModule)
inputs
	IADexe = EXE
parameters
	conditions = [{EXEMPTION_CODE  matches "*250"}]
	boolExpr = AND
end
FinalFirstDiabetesExe (AggregateModule)
inputs
	IADexe = FFirstDiabetesExe
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(EXE_START_DATE) ]
	results =  [ { FirstDiabetesExe: date } ]
end

// DIABETES: select first prescription 
FFirstAntidiabeticDrug (FilterModule)
inputs
	IADdrugs = DRUGS
parameters
	conditions = [{ ATC  matches "A10*" }]
	boolExpr = AND
end
ClYearFirstAntidiabeticDrug (ExtendDataModule)
inputs
	IADdrugs = FFirstAntidiabeticDrug
parameters
  attributes = [ { YearFirstAntidiabeticDrug: date } ]
end
YearFirstAntidiabeticDrug (ApplyFunction)
inputs
	custom = ClYearFirstAntidiabeticDrug
parameters
	function = Year (DRUG_EXPOSURE_START_DATE)
	result   = YearFirstAntidiabeticDrug
end
NumberFirstAntidiabeticDrug (AggregateModule)
inputs
	custom = YearFirstAntidiabeticDrug
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID,YearFirstAntidiabeticDrug ]
	functions = [ COUNT( PERSON_ID ), MIN(DRUG_EXPOSURE_START_DATE) ]
	results =  [ { NumberFirstAntidiabeticDrug : int };{ DateFirstFirstAntidiabeticDrug : date } ]
end
FilterTwoFirstAntidiabeticDrug (FilterModule)
inputs
	custom = NumberFirstAntidiabeticDrug
parameters
	conditions = [{NumberFirstAntidiabeticDrug>1}]
	boolExpr = AND
end
FinalFirstAntidiabeticDrug (AggregateModule)
inputs
	custom = FilterTwoFirstAntidiabeticDrug
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(DateFirstFirstAntidiabeticDrug) ]
	results =  [ { DateFirstFirstAntidiabeticDrug : date } ]
end

// INDICATORS: glycated emoglobin
FEmoGlic (FilterModule)
inputs
	IADoutpat = OUTPAT
parameters
	conditions = [{PROC_START_DATE > 2011-01-01};{PROC_START_DATE <= 2011-12-31};{PROC_COD  = "90.28.1"}]
	boolExpr = AND
end
AEmoGlic (AggregateModule)
inputs
	IADoutpat = FEmoGlic
parameters
	isInputSorted = false
	groupBy =  [ PERSON_ID ]
	functions = [ MIN(PROC_START_DATE), MAX(PROC_START_DATE), COUNT(PROC_START_DATE) ]
	results =  [ { MinDateEmoGlic: date };{ MaxDateEmoGlic: date };{ NumberEmoGlic: int } ]
end
ClFinalEmoGlic (ExtendDataModule)
inputs
	IADoutpat = AEmoGlic
parameters
  attributes = [ {IsEmoGlic : boolean } ]
end
FinalEmoGlic (ApplyFunction)
inputs
	custom = ClFinalEmoGlic
parameters
	function = Id(true)
	result   = IsEmoGlic
	conditions = [{PROC_START_DATE > 2011-01-01};{PROC_START_DATE <= 2011-12-31};{PROC_COD  = "90.28.1"}]
end

// FINAL: join Prev2011-01-01 with sources for diabetes
FinalFirstDiabetesDischargeFinalPrev20110101 (MergeModule)
inputs
	custom = FinalPrev20110101
	custom = FinalFirstDiabetesDischarge
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PATIENT_ID ]
end
FinalFirstDiabetesExeFinalPrev20110101 (MergeModule)
inputs
	custom = FinalFirstDiabetesDischargeFinalPrev20110101
	custom = FinalFirstDiabetesExe
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end
FinalFirstAntidiabeticDrugFinalPrev20110101 (MergeModule)
inputs
	custom = FinalFirstDiabetesExeFinalPrev20110101
	custom = FinalFirstAntidiabeticDrug
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end
FinalEmoGlicFinalPrev20110101 (MergeModule)
inputs
	custom = FinalFirstAntidiabeticDrugFinalPrev20110101
	custom = FinalEmoGlic
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end
FinalJoinWithDiab (ExtendDataModule)
inputs
	custom = FinalEmoGlicFinalPrev20110101
parameters
  attributes = [ { EmptyJoinWithDiab: boolean } ]
end
ClFinalDiabetesDate (ExtendDataModule)
inputs
	custom = FinalJoinWithDiab
parameters
  attributes = [ { DiabetesDate: date }  ]
end
FinalDiabetesDate (ApplyFunction)
inputs
	custom = ClFinalDiabetesDate
parameters
	function = MIN(FirstDiabetesDischarge,FinalFirstDiabetesExe,FinalFirstAntidiabeticDrug)
	result   = DiabetesDate 
	conditions = [{PROC_START_DATE > 2011-01-01};{PROC_START_DATE <= 2011-12-31};{PROC_COD  = "90.28.1"}]
end
ClFinalDiabetesDate (ExtendDataModule)
inputs
	custom = DiabetesPrevRaw
parameters
  attributes = [ { DiabetesPrev : boolean = false } ]
end
FinalDiabetesDate (ApplyFunction)
inputs
	custom = ClFinalDiabetesDate
parameters
	function = Id (true)
	result   = DiabetesPrev 
	conditions = [{ DiabetesDate < 2011-01-01 }]
end
DiabetesPrev (ApplyFunction)
inputs
	custom = DiabetesPrevRaw
parameters
	function = Id (false)
	result   = DiabetesPrev
	conditions =  [{ DiabetesDate = MISSING }]
end

// FINAL: clean indicators
DiabetesIndic (ApplyFunction)
inputs
	custom = DiabetesPrev
parameters
	function = Id (false)
	result   = DiabetesPrev
	conditions =  [{ DiabetesDate = MISSING }]
end


// Load Data
EXE (ScriptInputModule)
parameters
	scriptFilename = LoadEXE.txt
	inputName = EXEFile
	expectedSchema = IADexe
end

// Load Data
PERSON (ScriptInputModule)
parameters
	scriptFilename = LoadPERSON.txt
	inputName = PERSONFile
	expectedSchema = IADperson
end

// PREVALENT: mark prevalent at date 2011-01-01 
ClFinalPrev2011 (ExtendDataModule)
inputs
	IADperson = PERSON
parameters
  attributes = [ {Prev2011 : int = 0 } ]
end
FinalPrev2011 (ApplyFunction)
inputs
	custom = ClFinalPrev2011
parameters
	function = Id(1)
	result   = Prev2011
	conditions = [ {ENDDATE > 2011-01-01};{STARTDATE <= 2011-01-01} ]
	boolExpr = AND
end

// PREVALENT: filter prevalent at either date 2011-01-01 or date 2012-12-31
Cohort (FilterModule)
inputs
	custom = FinalPrev2011
parameters
	conditions = [{Prev2011 = 1}]
	
end

// Generate Year
ClYearEXE (ExtendDataModule)
inputs
	IADexe = EXE
parameters
  attributes = [ { Year: int } ]
end
YearEXE (ApplyFunction)
inputs
	custom = ClYearEXE
parameters
	function = Year(EXE_START_DATE)
	result   = Year
	
	
end

// Filter year
FilterLastYear (FilterModule)
inputs
	custom = YearEXE
parameters
	conditions = [{Year=2012}]
	
end

// Aggregate per PERSON
sortedBefAggAggregatedRecords (SortModule)
inputs
	custom = FilterLastYear
parameters
	fieldNames = [ PERSON_ID ]
end
AggregatedRecords (AggregateModule)
inputs
	custom = sortedBefAggAggregatedRecords
parameters
	isInputSorted = true
	groupBy =  [ PERSON_ID ]
	functions = [ COUNT( PERSON_ID ) ]
	results =  [ { NumberRecordsEXE : int } ]
end

// Merge with Cohort
sortedCohort (SortModule)
inputs
	custom = Cohort
parameters
	fieldNames = [ PERSON_ID ]
end
sortedAggregatedRecords (SortModule)
inputs
	custom = AggregatedRecords
parameters
	fieldNames = [ PERSON_ID ]
end
FinalJoinPrev (MergeModule)
inputs
	custom = sortedCohort
	custom = sortedAggregatedRecords
parameters
	primaryKey = [ PERSON_ID ]
	fieldNames = [ PERSON_ID ]
end

// replace missing with 0
NumbersEXE (ApplyFunction)
inputs
	custom = FinalJoinPrev
parameters
	function = Id(0)
	result   = NumberRecordsEXE
	conditions = [ { NumberRecordsEXE = MISSING } ]
	
end

// gen numerical Prev
NumbersEXEFin (ExtendDataModule)
inputs
	custom = NumbersEXE
parameters
  attributes = [ {PrevNum : int = 1 };{Prev : int = 1 } ]
end

// Aggregate
QualityEXE (AggregateModule)
inputs
	custom = NumbersEXEFin
parameters
	isInputSorted = true
	groupBy =  [ Prev ]
	functions = [ SUM( PrevNum ),SUM( NumberRecordsEXE ), AVG(NumberRecordsEXE) ]
	results =  [ {Pop2012 : int };{TotRecordsEXE : int };{ MeanProCapiteEXE : float } ]
end
